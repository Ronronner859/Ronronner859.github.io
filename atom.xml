<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大白话说前端，多读源码多实践，勤于思考善领悟</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-09-17T14:31:52.247Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>er dong yi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>话说设计模式</title>
    <link href="http://example.com/2024/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2024/09/17/设计模式/</id>
    <published>2024-09-17T07:00:00.000Z</published>
    <updated>2024-09-17T14:31:52.247Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不同的业务场景可以采用不同的设计模式</p></blockquote><h2 id="1-构造器模式"><a href="#1-构造器模式" class="headerlink" title="1.构造器模式"></a>1.构造器模式</h2><p>可以批量生产对象</p><p>构造器模式是一种创建对象的设计模式，它提供了一种创建对象的方式，而不需要暴露内部结构。</p><p>构造器模式的主要优点是：</p><p>\1. 可以隐藏对象的创建细节，使代码更加简洁。</p><p>\2. 可以方便地修改对象的创建方式，而不需要修改客户端代码。</p><p>\3. 可以方便地创建多个对象，而不需要重复编写代码。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240917145827668.png" alt="image-20240917145827668"></p><p>然而：say()方法每次都要生成；非常冗余；统称搭配原型来使用！</p><h2 id="2-原型模式"><a href="#2-原型模式" class="headerlink" title="2.原型模式"></a>2.原型模式</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240917150216231.png" alt="image-20240917150216231"></p><p><strong>es6 语法：利用 calss 类的方式构造（构造器）</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20240917150303280.png" alt="image-20240917150303280"></p><p>其中 say()方法自动装载到了原型之上。</p><h3 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h3><ul><li>tab 栏案例</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240917165514322.png" alt="image-20240917165514322"></p><h2 id="3-工厂模式"><a href="#3-工厂模式" class="headerlink" title="3.工厂模式"></a>3.工厂模式</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240917170005727.png" alt="image-20240917170005727"></p><p>应用场景：权限管理（不同的角色有不同的权限）</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240917171440892.png" alt="image-20240917171440892"></p><p>es6 语法</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240917172501512.png" alt="image-20240917172501512"></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240917172516638.png" alt="image-20240917172516638"></p><h2 id="4-抽象工厂模式"><a href="#4-抽象工厂模式" class="headerlink" title="4.抽象工厂模式"></a>4.抽象工厂模式</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;不同的业务场景可以采用不同的设计模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-构造器模式&quot;&gt;&lt;a href=&quot;#1-构造器模式&quot; class=&quot;headerlink&quot; title=&quot;1.构造器模式&quot;&gt;&lt;/a&gt;1.构造器模式&lt;/h2&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>v-for指令中key&amp;虚拟dom&amp;diff算法【QUESTION】</title>
    <link href="http://example.com/2024/07/22/v-for%E4%B8%AD%E7%9A%84key%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9FDOM/"/>
    <id>http://example.com/2024/07/22/v-for中的key有什么作用什么是虚拟DOM/</id>
    <published>2024-07-22T14:00:41.000Z</published>
    <updated>2024-07-22T12:19:19.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-认识一下v-for的作用"><a href="#1-认识一下v-for的作用" class="headerlink" title="1.认识一下v-for的作用"></a>1.认识一下v-for的作用</h2><pre><code>简单说，vue可以使用v-for来遍历元素</code></pre><h2 id="2-重点说一下key属性"><a href="#2-重点说一下key属性" class="headerlink" title="2.重点说一下key属性"></a>2.重点说一下key属性</h2><pre><code>那么在属性中，绑定key和不绑定key的一个区别是什么？key属性主要用在Vue的虚拟DOM算法，在新I日nodes对比时辨识VNodes如果不使用key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法;而使用key时，它会基于key的变化重新排列元素顺序，并且会移除/销毁key不存在的元素;底层主要实现的是diff算法 有key或无key主要vnode是否进行复用的一个操作有key可以提升浏览器渲染生成真实DOM的一个性能的</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-认识一下v-for的作用&quot;&gt;&lt;a href=&quot;#1-认识一下v-for的作用&quot; class=&quot;headerlink&quot; title=&quot;1.认识一下v-for的作用&quot;&gt;&lt;/a&gt;1.认识一下v-for的作用&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;简单说，vue可以使用v-f
      
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue创建前端项目两种不同的方式</title>
    <link href="http://example.com/2024/07/21/VUECLI%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://example.com/2024/07/21/VUECLI的创建/</id>
    <published>2024-07-21T14:00:41.000Z</published>
    <updated>2024-07-22T12:08:11.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-方式一【基于webpack构建】"><a href="#1-方式一【基于webpack构建】" class="headerlink" title="1.方式一【基于webpack构建】"></a>1.方式一【基于webpack构建】</h2><p>全局按照依赖包，通过vue create ‘xxx（项目名）’来创建<br>具体步骤如下：</p><h3 id="1-1-全局安装依赖包-注意ode版本"><a href="#1-1-全局安装依赖包-注意ode版本" class="headerlink" title="1.1 全局安装依赖包 (注意ode版本)"></a>1.1 全局安装依赖包 (注意ode版本)</h3><pre><code>npm install -g @vue/cli</code></pre><h3 id="1-2-创建一个项目"><a href="#1-2-创建一个项目" class="headerlink" title="1.2 创建一个项目"></a>1.2 创建一个项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create project_demo</span><br></pre></td></tr></table></figure><h3 id="1-3-选择需要的版本或者手动选择特性"><a href="#1-3-选择需要的版本或者手动选择特性" class="headerlink" title="1.3 选择需要的版本或者手动选择特性"></a>1.3 选择需要的版本或者手动选择特性</h3><ul><li>选择预设</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722194930642.png" alt="image-20240722194930642"></p><ul><li>选择特性</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722195149657.png" alt="image-20240722195149657"></p><ul><li>选择版本</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722195210207.png" alt="image-20240722195210207"></p><ul><li>选择配置是否单独放一个文件中</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722195252828.png" alt="image-20240722195252828"></p><ul><li>是否保存为一个预设</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722195316905.png" alt="image-20240722195316905"></p><p>基于以上配置通过vue create命令基本创建完成。</p><ul><li><p>目录介绍</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/mymyimage-20240722195658434.png"></p></li></ul><h2 id="2-方式二【基于vite构建】"><a href="#2-方式二【基于vite构建】" class="headerlink" title="2.方式二【基于vite构建】"></a>2.方式二【基于vite构建】</h2><h3 id="2-1-npm-init-vue-latest"><a href="#2-1-npm-init-vue-latest" class="headerlink" title="2.1 npm init vue@latest"></a>2.1 npm init vue@latest</h3><blockquote><p>1.安装一个本地工具，create-vue<br>2.用create-vue创建一个vue项目</p></blockquote><p>@latest 总是保持一个最新的版本</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722200352191.png" alt="image-20240722200352191"></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722200448119.png" alt="image-20240722200448119"></p><p>其他与webpack构建的基本是一致的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-方式一【基于webpack构建】&quot;&gt;&lt;a href=&quot;#1-方式一【基于webpack构建】&quot; class=&quot;headerlink&quot; title=&quot;1.方式一【基于webpack构建】&quot;&gt;&lt;/a&gt;1.方式一【基于webpack构建】&lt;/h2&gt;&lt;p&gt;全局按照依赖
      
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>JS_函数中this的指向多情况分析</title>
    <link href="http://example.com/2024/07/20/JS01_%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E5%A4%9A%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/07/20/JS01_函数中this的指向多情况分析/</id>
    <published>2024-07-20T10:58:13.713Z</published>
    <updated>2024-07-22T02:47:10.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1.默认绑定"></a>1.默认绑定</h2><p>默认绑定this都是指向的window全局对象</p><p>JS中只要定义了一个方法，那么该方法就会有this指向，然而在不同的情况this的指向也会有所不同</p><p>情况一：函数直接调用</p><p>情况二：通过对象调用</p><p>情况三：箭头函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.直接调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this绑定规则一之默认绑定&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数定义在对象之后，但是独立调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">bar</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bax =  obj.<span class="property">bar</span></span><br><span class="line"><span class="title function_">bax</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.高阶函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(obj.<span class="property">bar</span>);</span><br></pre></td></tr></table></figure><p>上面两种方式的调用this都是默认绑定，指向的window全局对象</p><p>补充：若是在严格模式”use strict”下，独立调用的函数的this指向是指向undefined</p><h2 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2.隐式绑定"></a>2.隐式绑定</h2><p>隐式绑定this指向的是某个对象发起的函数调用，指向这个对象本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也就是它的调用位置中，是通过某个对象发起的函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = &#123;</span><br><span class="line">    <span class="attr">bar</span>:foo</span><br><span class="line">&#125;</span><br><span class="line">x.<span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure><p>this指向的是x这个对象本身。</p><h2 id="3-new关键字"><a href="#3-new关键字" class="headerlink" title="3.new关键字"></a>3.new关键字</h2><p>使用new关键词时，会创建一个新的空对象，this指向这个空对象【简单解释】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">new</span> <span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// foo()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.创建一个空对象</span></span><br><span class="line"><span class="comment">2.将this指向这个空对象</span></span><br><span class="line"><span class="comment">3.指向函数体中的代码</span></span><br><span class="line"><span class="comment">4.没有显示返回的非空对象时，默认返回这个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>控制台打印结果为：<em>foo</em> <em>{}</em></p><h2 id="4-显示绑定apply、call、bind"><a href="#4-显示绑定apply、call、bind" class="headerlink" title="4.显示绑定apply、call、bind"></a>4.显示绑定apply、call、bind</h2><h3 id="4-1-call函数"><a href="#4-1-call函数" class="headerlink" title="4.1 call函数"></a>4.1 call函数</h3><p>可以执行call函数，强制this指向某一个对象，可以明确的告诉this绑定什么，直接了当</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// obj.add = add</span></span><br><span class="line"><span class="comment">// obj.add()</span></span><br><span class="line"><span class="comment">// 执行函数，并且强制this就是obj对象  自己显示的明确告诉他绑定什么</span></span><br><span class="line"><span class="comment">//执行函数，并且函数中的this指向obj对象</span></span><br><span class="line">add.<span class="title function_">call</span>(obj)</span><br><span class="line">add.<span class="title function_">call</span>(<span class="number">412</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2-apply函数"><a href="#4-2-apply函数" class="headerlink" title="4.2 apply函数"></a>4.2 apply函数</h3><p>apply函数主要与call的区别是传入的参数格式不同，都可以明白告诉this绑定什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    调用一起函数，同时绑定一个this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name,age,height</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,height)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;kobe&#x27;</span>, <span class="number">12</span>, <span class="number">1.98</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一个参数：绑定this</span></span><br><span class="line"><span class="comment">    第二个参数：传入额外的参数，以数组的形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;hello world&#x27;</span>, [<span class="string">&#x27;kobe&#x27;</span>, <span class="number">12</span>, <span class="number">1.98</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一个参数：绑定this</span></span><br><span class="line"><span class="comment">    参数列表：后续的参数是以多参数的一个形式的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">213</span>, <span class="number">2.07</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// call 和 apply 第二个参数的传入的格式不一样</span></span><br></pre></td></tr></table></figure><h3 id="4-3-bind函数"><a href="#4-3-bind函数" class="headerlink" title="4.3 bind函数"></a>4.3 bind函数</h3><p>bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为<strong>新函数</strong>的参数，供调用时进行使用</p><p>官方：Function.prototype.bind()</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function"><code>Function</code></a> 实例的 <strong>bind()</strong> 方法创建一个新函数，当调用该新函数时，它会调用原始函数并将其 <code>this</code> 关键字设置为给定的值，同时，还可以传入一系列指定的参数，这些参数会插入到调用新函数时传入的参数的前面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;john&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求:调用foo时，总是绑定到obj对象身上(不希望obj对象身上有函数)</span></span><br><span class="line"><span class="comment">// 在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时进行使用</span></span><br><span class="line"> <span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="title function_">bar</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo)</span><br></pre></td></tr></table></figure><p>经典案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">getX</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unboundGetX 没有绑定到 module，所以 this 指向全局对象，导致返回 undefined。</span></span><br><span class="line"><span class="comment"> * boundGetX 被绑定到 module，所以 this 指向 module，返回 42。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> unboundGetX = <span class="variable language_">module</span>.<span class="property">getX</span>;</span><br><span class="line"><span class="comment">// 全局下调用unboundGetX是this会指向全局对象windows nodejs中指向global 全局中无x，输出undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unboundGetX</span>()); <span class="comment">// The function gets invoked at the global scope</span></span><br><span class="line"><span class="comment">// Expected output: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 方法创建了一个新的函数，该函数的 this 永远指向 module。</span></span><br><span class="line"><span class="keyword">const</span> boundGetX = unboundGetX.<span class="title function_">bind</span>(<span class="variable language_">module</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">boundGetX</span>());</span><br><span class="line"><span class="comment">// Expected output: 42</span></span><br></pre></td></tr></table></figure><h3 id="4-4-call-、apply-、bind-的区别及用法"><a href="#4-4-call-、apply-、bind-的区别及用法" class="headerlink" title="4.4 call()、apply()、bind()的区别及用法"></a>4.4 call()、apply()、bind()的区别及用法</h3><p>简单用法：都是用来改变this的指向</p><p><strong>call、apply的一个区别：</strong></p><p>相同点：<strong>都是调用一个对象的一个方法，用另一个对象替换当前对象（功能相同）</strong></p><p>不同点：参数格式不同</p><h5 id="call-的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；"><a href="#call-的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；" class="headerlink" title="call()的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；"></a>call()的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；</h5><h5 id="apply-：第一个参数是this要指向的对象，第二个参数是数组"><a href="#apply-：第一个参数是this要指向的对象，第二个参数是数组" class="headerlink" title="apply()：第一个参数是this要指向的对象，第二个参数是数组[]"></a>apply()：第一个参数是this要指向的对象，第二个参数是数组[]</h5><p><strong>call、bind的一个区别：</strong></p><p>相同点: 都是用来改变this的指向</p><p>不同点：call改变this的指向后会再执行函数，<strong>bind改变this的指向后不会再执行函数，返回一个绑定新this的函数</strong>【React有用到】</p><p>用法：call函数</p><ol><li><strong>用来判断数据类型！</strong>  延伸–判断数据类型的方式有哪几种？</li></ol><blockquote><p><strong>在判断数据类形式使用typeof，一般不是太准确的，我们可以使用Object.prototype.toString.call()方法来判断一个数据的数据类型</strong></p></blockquote><ol start="2"><li><h4 id="利用call-翻转字符串"><a href="#利用call-翻转字符串" class="headerlink" title="利用call()翻转字符串"></a>利用call()翻转字符串</h4></li></ol><p>用法：apply函数</p><ol><li>进行求和计算</li></ol><h3 id="4-5-扩展：函数绑定的新姿势-——ES7-bind-运算符（-）"><a href="#4-5-扩展：函数绑定的新姿势-——ES7-bind-运算符（-）" class="headerlink" title="4.5 扩展：函数绑定的新姿势 ——ES7 bind 运算符（::）"></a>4.5 扩展：函数绑定的新姿势 ——ES7 bind 运算符（::）</h3><blockquote><p>ES7 bind 运算符是一种新的绑定语法，它使用两个冒号 (::) 表示，通常被称为 “双冒号运算符” 或者 “作用域解析运算符”。它的作用是将一个函数绑定到一个特定的上下文中。bind 运算符始终将左边的表达式作为函数的上下文（即 this），右边的表达式作为函数名，同时还会将左边表达式中的属性和方法转移到右边表达式中。</p></blockquote><h2 id="6-this绑定规则优先级"><a href="#6-this绑定规则优先级" class="headerlink" title="6.this绑定规则优先级"></a>6.this绑定规则优先级</h2><h2 id="7-this绑定之外的规则"><a href="#7-this绑定之外的规则" class="headerlink" title="7.this绑定之外的规则"></a>7.this绑定之外的规则</h2><h2 id="8-箭头函数的写法arrow-function"><a href="#8-箭头函数的写法arrow-function" class="headerlink" title="8.箭头函数的写法arrow function"></a>8.箭头函数的写法arrow function</h2><h2 id="9-箭头函数的简写arrow"><a href="#9-箭头函数的简写arrow" class="headerlink" title="9.箭头函数的简写arrow"></a>9.箭头函数的简写arrow</h2><h2 id="10-箭头函数实现所有偶数平方的和"><a href="#10-箭头函数实现所有偶数平方的和" class="headerlink" title="10.箭头函数实现所有偶数平方的和"></a>10.箭头函数实现所有偶数平方的和</h2><h2 id="11-箭头函数中的this使用"><a href="#11-箭头函数中的this使用" class="headerlink" title="11.箭头函数中的this使用"></a>11.箭头函数中的this使用</h2><h2 id="12-箭头函数中this的应用【模拟网络请求】"><a href="#12-箭头函数中this的应用【模拟网络请求】" class="headerlink" title="12.箭头函数中this的应用【模拟网络请求】"></a>12.箭头函数中this的应用【模拟网络请求】</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-默认绑定&quot;&gt;&lt;a href=&quot;#1-默认绑定&quot; class=&quot;headerlink&quot; title=&quot;1.默认绑定&quot;&gt;&lt;/a&gt;1.默认绑定&lt;/h2&gt;&lt;p&gt;默认绑定this都是指向的window全局对象&lt;/p&gt;
&lt;p&gt;JS中只要定义了一个方法，那么该方法就会有th
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>promise的网络请求库，作用于node.js 和浏览器中【REVIEW】</title>
    <link href="http://example.com/2024/06/21/Axios/"/>
    <id>http://example.com/2024/06/21/Axios/</id>
    <published>2024-06-21T14:00:41.000Z</published>
    <updated>2024-07-22T12:50:05.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Axios"><a href="#1-Axios" class="headerlink" title="1. Axios"></a>1. Axios</h2><p><a href="https://axios-http.com/">https://axios-http.com/</a><br><a href="https://www.bootcss.com/">https://www.bootcss.com/</a><br>前置知识：</p><ul><li>promise</li><li>ajax</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722204114292.png" alt="image-20240722204114292"></p><h2 id="2-json-server"><a href="#2-json-server" class="headerlink" title="2. json-server"></a>2. json-server</h2><p><a href="https://github.com/typicode/json-server">https://github.com/typicode/json-server</a></p><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure><h2 id="3-项目开始"><a href="#3-项目开始" class="headerlink" title="3. 项目开始"></a>3. 项目开始</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722204134963.png" alt="image-20240722204134963"><br>国内引入：<a href="https://www.bootcdn.cn/axios/">https://www.bootcdn.cn/axios/</a></p><h2 id="4-发送请求"><a href="#4-发送请求" class="headerlink" title="4. 发送请求"></a>4. 发送请求</h2><h2 id="5-GET"><a href="#5-GET" class="headerlink" title="5. GET"></a>5. GET</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="响应200-查看请求头"><a href="#响应200-查看请求头" class="headerlink" title="响应200 查看请求头"></a>响应200 查看请求头</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722204159238.png" alt="image-20240722204159238"></p><h2 id="6-POST"><a href="#6-POST" class="headerlink" title="6. POST"></a>6. POST</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">    <span class="comment">//     请求体</span></span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">            <span class="attr">views</span>: <span class="number">120</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722204209540.png" alt="image-20240722204209540"></p><h2 id="7-PUT"><a href="#7-PUT" class="headerlink" title="7. PUT"></a>7. PUT</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">        <span class="comment">//     请求体</span></span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&quot;WORLD&quot;</span>,</span><br><span class="line">            <span class="attr">views</span>: <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-DELETE"><a href="#8-DELETE" class="headerlink" title="8. DELETE"></a>8. DELETE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">btns[<span class="number">3</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-其他发送请求"><a href="#9-其他发送请求" class="headerlink" title="9. 其他发送请求"></a>9. 其他发送请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios#<span class="title function_">request</span>(config)</span><br><span class="line">axios#<span class="title function_">get</span>(url[, config])</span><br><span class="line">axios#<span class="title function_">delete</span>(url[, config])</span><br><span class="line">axios#<span class="title function_">head</span>(url[, config])</span><br><span class="line">axios#<span class="title function_">options</span>(url[, config])</span><br><span class="line">axios#<span class="title function_">post</span>(url[, data[, config]])</span><br><span class="line">axios#<span class="title function_">put</span>(url[, data[, config]])</span><br><span class="line">axios#<span class="title function_">patch</span>(url[, data[, config]])</span><br><span class="line">axios#<span class="title function_">getUri</span>([config])</span><br></pre></td></tr></table></figure><h2 id="10-请求配置"><a href="#10-请求配置" class="headerlink" title="10. 请求配置"></a>10. 请求配置</h2><p>这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 GET 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">        <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">        <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">        <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">        <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">        <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">        <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">        <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义请求头</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">    <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">    <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">    <span class="attr">paramsSerializer</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">    <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">    <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">    <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">    <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">    <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">    <span class="comment">// 请求方式 post</span></span><br><span class="line">    <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">    <span class="attr">data</span>: <span class="string">&#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">        <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">        <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">        <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">        <span class="attr">adapter</span>: <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">            <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">    <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">    <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">        <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">        <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">        <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">        <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">        <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">        <span class="comment">// 浏览器专属</span></span><br><span class="line">        <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理原生进度事件</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">    <span class="comment">// 浏览器专属</span></span><br><span class="line">    <span class="attr">onDownloadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理原生进度事件</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">    <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">        <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">        <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">        <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">        <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">    <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">    <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">        <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">        <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">        <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">        <span class="attr">socketPath</span>: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">        <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">        <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">        <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">        <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">        <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">        <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">        <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">        <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">        <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="attr">protocol</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">            <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">            <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">            <span class="attr">auth</span>: &#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">                <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">    <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// `decompress` indicates whether or not the response body should be decompressed </span></span><br><span class="line">        <span class="comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span></span><br><span class="line">        <span class="comment">// from the responses objects of all decompressed responses</span></span><br><span class="line">        <span class="comment">// - Node only (XHR cannot turn off decompression)</span></span><br><span class="line">        <span class="attr">decompress</span>: <span class="literal">true</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-axios响应信息"><a href="#11-axios响应信息" class="headerlink" title="11. axios响应信息"></a>11. axios响应信息</h2><ul><li>config 配置对象</li><li>data 响应体</li><li>header 响应头信息</li><li>request 原生的ajax对象</li><li>status </li><li>statusText <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  <span class="attr">request</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-axios默认配置"><a href="#12-axios默认配置" class="headerlink" title="12. axios默认配置"></a>12. axios默认配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;axios基本使用&lt;/title&gt;</span><br><span class="line">    &lt;link crossorigin=&quot;anonymous&quot; href=&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;h2 class=&quot;page-header&quot;&gt;基本使用&lt;/h2&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-primary&quot;&gt; 发送GET请求 &lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-warning&quot; &gt; 发送POST请求 &lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-success&quot;&gt; 发送 PUT 请求 &lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot;&gt; 发送 DELETE 请求 &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //获取按钮</span><br><span class="line">        const btns = document.querySelectorAll(&#x27;button&#x27;);</span><br><span class="line">        //默认配置</span><br><span class="line">        axios.defaults.method = &#x27;GET&#x27;;//设置默认的请求类型为 GET</span><br><span class="line">        axios.defaults.baseURL = &#x27;http://localhost:3000&#x27;;//设置基础 URL</span><br><span class="line">        axios.defaults.params = &#123;id:100&#125;;</span><br><span class="line">        axios.defaults.timeout = 3000;//</span><br><span class="line"></span><br><span class="line">        btns[0].onclick = function()&#123;</span><br><span class="line">            axios(&#123;</span><br><span class="line">                url: &#x27;/posts&#x27;</span><br><span class="line">            &#125;).then(response =&gt; &#123;</span><br><span class="line">                console.log(response);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Axios&quot;&gt;&lt;a href=&quot;#1-Axios&quot; class=&quot;headerlink&quot; title=&quot;1. Axios&quot;&gt;&lt;/a&gt;1. Axios&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://axios-http.com/&quot;&gt;https://axios-
      
    
    </summary>
    
      <category term="http网络" scheme="http://example.com/categories/http%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Node的基本认识【BASIC】</title>
    <link href="http://example.com/2024/05/20/Node.js%E3%80%90%E5%85%A5%E9%97%A8%E7%BA%A7%E3%80%91/"/>
    <id>http://example.com/2024/05/20/Node.js【入门级】/</id>
    <published>2024-05-20T14:00:41.000Z</published>
    <updated>2024-07-22T11:38:13.728Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以脱离浏览器来执行js代码,没有DOM和BOM对象,针对后端可以编写接口，提供网页资源，前端可以集成各种工具（承上启下）</span><br></pre></td></tr></table></figure><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><h2 id="1-Buffer"><a href="#1-Buffer" class="headerlink" title="1.Buffer"></a>1.Buffer</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185800133.png" alt="image-20240722185800133"></p><h2 id="2-Buffer相关操作"><a href="#2-Buffer相关操作" class="headerlink" title="2.Buffer相关操作"></a>2.Buffer相关操作</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185811863.png" alt="image-20240722185811863"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);</span><br><span class="line"><span class="keyword">let</span> buf_3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3);</span><br></pre></td></tr></table></figure><h2 id="3-fs模块-读写模块【回顾一下liunx操作系统】【增删改查操作】"><a href="#3-fs模块-读写模块【回顾一下liunx操作系统】【增删改查操作】" class="headerlink" title="3.fs模块-读写模块【回顾一下liunx操作系统】【增删改查操作】"></a>3.fs模块-读写模块【回顾一下liunx操作系统】【增删改查操作】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185823072.png" alt="image-20240722185823072"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">与本机文件系统进行交互的，方法和属性</span><br></pre></td></tr></table></figure><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185832249.png" alt="image-20240722185832249"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185840006.png" alt="image-20240722185840006"></p><h2 id="4-fs异步和同步"><a href="#4-fs异步和同步" class="headerlink" title="4.fs异步和同步"></a>4.fs异步和同步</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185852184.png" alt="image-20240722185852184"></p><h2 id="5-fs文件追加操作"><a href="#5-fs文件追加操作" class="headerlink" title="5.fs文件追加操作"></a>5.fs文件追加操作</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185903793.png" alt="image-20240722185903793"></p><h2 id="6-文件写入的场景-【做持久化】"><a href="#6-文件写入的场景-【做持久化】" class="headerlink" title="6.文件写入的场景-【做持久化】"></a>6.文件写入的场景-【做持久化】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185915521.png" alt="image-20240722185915521"></p><h2 id="7-文件读取"><a href="#7-文件读取" class="headerlink" title="7.文件读取"></a>7.文件读取</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185929153.png" alt="image-20240722185929153"></p><h2 id="8-写一个创建文件的脚本"><a href="#8-写一个创建文件的脚本" class="headerlink" title="8.写一个创建文件的脚本"></a>8.写一个创建文件的脚本</h2><h2 id="9-fs流式写入"><a href="#9-fs流式写入" class="headerlink" title="9.fs流式写入"></a>9.fs流式写入</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722185950220.png" alt="image-20240722185950220"></p><h2 id="10-exports对象"><a href="#10-exports对象" class="headerlink" title="10.exports对象"></a>10.exports对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由于module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了exports 对象。默认情况下，exports和module.exports 指向同一个对象。最终共享的结果，还是以module.exports指向的对象为准。</span><br><span class="line">时刻谨记，require()模块时，得到的永远是module.exports指向的对象:</span><br></pre></td></tr></table></figure><h2 id="11-计算机组成"><a href="#11-计算机组成" class="headerlink" title="11.计算机组成"></a>11.计算机组成</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722190005679.png" alt="image-20240722190005679"></p><h2 id="12-模块化"><a href="#12-模块化" class="headerlink" title="12.模块化"></a>12.模块化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-require的使用</span><br><span class="line">-模块化的好处-&gt;无法共享成员</span><br><span class="line">-module对象，每个.js都自定义模块中都有一个module对象</span><br><span class="line">-exports 自定义模块中，可以使用exports将模块中的成员共享出去，给外界使用  在自定义模块中，默认情况下，module.export = &#123;&#125;</span><br><span class="line">使用require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准。</span><br></pre></td></tr></table></figure><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722190016626.png" alt="image-20240722190016626"></p><h2 id="13-模块化初体验"><a href="#13-模块化初体验" class="headerlink" title="13.模块化初体验"></a>13.模块化初体验</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722190034603.png" alt="image-20240722190034603"></p><h2 id="14-模块暴露数据"><a href="#14-模块暴露数据" class="headerlink" title="14.模块暴露数据"></a>14.模块暴露数据</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1710658668469-7a3df286-090c-4ba6-b021-0fc82b1e439d.png#averageHue=%232b2b23&clientId=uab5eda68-2013-4&from=paste&height=687&id=ud3ba9a56&originHeight=824&originWidth=1464&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=547234&status=done&style=none&taskId=uc95e74da-8ae8-4a2b-abc0-e4ac861d1e2&title=&width=1219.9999515215575" alt="image.png"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722190048595.png" alt="image-20240722190048595"></p><h2 id="15-导入（引入）模块"><a href="#15-导入（引入）模块" class="headerlink" title="15.导入（引入）模块"></a>15.导入（引入）模块</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722191730313.png" alt="image-20240722191730313"><br>导入 js 和 json文件时 可以省略后缀</p><h2 id="16-导入模块的基本流程"><a href="#16-导入模块的基本流程" class="headerlink" title="16.导入模块的基本流程"></a>16.导入模块的基本流程</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722191741753.png" alt="image-20240722191741753"></p><h2 id="17-commonJS规范"><a href="#17-commonJS规范" class="headerlink" title="17.commonJS规范"></a>17.commonJS规范</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722191752584.png" alt="image-20240722191752584"></p><h2 id="18-包管理工具【哆啦A梦】"><a href="#18-包管理工具【哆啦A梦】" class="headerlink" title="18.包管理工具【哆啦A梦】"></a>18.包管理工具【哆啦A梦】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192635496.png" alt="image-20240722192635496"></p><h2 id="19-npm"><a href="#19-npm" class="headerlink" title="19.npm"></a>19.npm</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192646803.png" alt="image-20240722192646803"></p><h2 id="20-npm基本使用"><a href="#20-npm基本使用" class="headerlink" title="20.npm基本使用"></a>20.npm基本使用</h2><h3 id="20-1初始化"><a href="#20-1初始化" class="headerlink" title="20.1初始化"></a>20.1初始化</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192726796.png" alt="image-20240722192726796"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test01&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192737910.png" alt="image-20240722192737910"></p><h3 id="20-2如何搜索-下载npm包-npmjs-com"><a href="#20-2如何搜索-下载npm包-npmjs-com" class="headerlink" title="20.2如何搜索&#x2F;下载npm包 npmjs.com"></a>20.2如何搜索&#x2F;下载npm包 <a href="https://npmjs.com/">npmjs.com</a></h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192802505.png" alt="image-20240722192802505"></p><h3 id="20-3require导入包的基本流程"><a href="#20-3require导入包的基本流程" class="headerlink" title="20.3require导入包的基本流程"></a>20.3require导入包的基本流程</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192812083.png" alt="image-20240722192812083"></p><h3 id="20-4开发依赖和生产依赖"><a href="#20-4开发依赖和生产依赖" class="headerlink" title="20.4开发依赖和生产依赖"></a>20.4开发依赖和生产依赖</h3><p><a href="https://juejin.cn/post/7135795969370619918">https://juejin.cn/post/7135795969370619918</a><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/my1710667704366-53c47f96-3753-4f3d-98b6-e16d26ce2380.png" alt="image.png"></p><h3 id="20-5npm全局安装"><a href="#20-5npm全局安装" class="headerlink" title="20.5npm全局安装"></a>20.5npm全局安装</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192854948.png" alt="image-20240722192854948"></p><h3 id="20-6修改windows执行策略"><a href="#20-6修改windows执行策略" class="headerlink" title="20.6修改windows执行策略"></a>20.6修改windows执行策略</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192922707.png" alt="image-20240722192922707"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1710668210313-d38c6ec6-6e93-487e-9a16-e83306697ad6.png#averageHue=%23c5d0c5&clientId=u151ed77f-0541-4&from=paste&height=366&id=uea013fdf&originHeight=439&originWidth=1236&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=289254&status=done&style=none&taskId=u8f711dd8-ec37-4a43-9816-88f3dbf131f&title=&width=1029.9999590714788" alt="image.png"></p><h2 id="21-环境变量path"><a href="#21-环境变量path" class="headerlink" title="21.环境变量path"></a>21.环境变量path</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192936895.png" alt="image-20240722192936895"></p><h3 id="20-1-npm安装包的所有依赖"><a href="#20-1-npm安装包的所有依赖" class="headerlink" title="20.1 npm安装包的所有依赖"></a>20.1 npm安装包的所有依赖</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192946860.png" alt="image-20240722192946860"></p><h2 id="22-安装指定版本的包"><a href="#22-安装指定版本的包" class="headerlink" title="22.安装指定版本的包"></a>22.安装指定版本的包</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722192954600.png" alt="image-20240722192954600"></p><h2 id="23-配置命令别名"><a href="#23-配置命令别名" class="headerlink" title="23.配置命令别名"></a>23.配置命令别名</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193005553.png" alt="image-20240722193005553"></p><h2 id="24-cnpm"><a href="#24-cnpm" class="headerlink" title="24.cnpm"></a>24.cnpm</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193017454.png" alt="image-20240722193017454"></p><h2 id="25-配置淘宝镜像"><a href="#25-配置淘宝镜像" class="headerlink" title="25.配置淘宝镜像"></a>25.配置淘宝镜像</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193026238.png" alt="image-20240722193026238"> </p><h2 id="26-yarn"><a href="#26-yarn" class="headerlink" title="26.yarn"></a>26.yarn</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193035283.png" alt="image-20240722193035283"></p><h2 id="27-npm和yarn的使用"><a href="#27-npm和yarn的使用" class="headerlink" title="27.npm和yarn的使用"></a>27.npm和yarn的使用</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193128589.png" alt="image-20240722193128589"></p><h2 id="28-管理发布包"><a href="#28-管理发布包" class="headerlink" title="28.管理发布包"></a>28.管理发布包</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193139825.png" alt="image-20240722193139825"></p><h2 id="29-更新和删除"><a href="#29-更新和删除" class="headerlink" title="29.更新和删除"></a>29.更新和删除</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193152416.png" alt="image-20240722193152416"></p><h2 id="30-扩展"><a href="#30-扩展" class="headerlink" title="30.扩展"></a>30.扩展</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193307073.png" alt="image-20240722193307073"></p><h2 id="31-nvm"><a href="#31-nvm" class="headerlink" title="31.nvm"></a>31.nvm</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193315354.png" alt="image-20240722193315354"></p><h2 id="32-常用命令"><a href="#32-常用命令" class="headerlink" title="32.常用命令"></a>32.常用命令</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193323474.png" alt="image-20240722193323474"></p><h2 id="33-expressJS"><a href="#33-expressJS" class="headerlink" title="33.expressJS"></a>33.expressJS</h2><p>Express是一个流行的Node.js Web应用程序框架，用于构建服务器端应用程序。它提供了一组简洁而灵活的工具和中间件，使开发者可以轻松地构建RESTful API和Web应用。Express具有路由、请求和响应处理、中间件等功能，可以帮助开发者管理HTTP请求和构建服务器端逻辑。通过Express，可以搭建一个响应请求的服务器，处理前端发起的HTTP请求并返回相应的数据或页面。</p><h2 id="34-简单应用"><a href="#34-简单应用" class="headerlink" title="34.简单应用"></a>34.简单应用</h2><h2 id="35-路由"><a href="#35-路由" class="headerlink" title="35.路由"></a>35.路由</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193340649.png" alt="image-20240722193340649"></p><ul><li>方法</li><li>路径</li><li>回调<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Welcome to the Home page&#x27;</span>)</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Welcome to the Home page with   instructions   for creating&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Welcome to the Login page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;404  Not Found &#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listening on http://localhost&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="36-获取请求参数"><a href="#36-获取请求参数" class="headerlink" title="36.获取请求参数"></a>36.获取请求参数</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193356905.png" alt="image-20240722193356905"></p><h2 id="37-获取路由参数"><a href="#37-获取路由参数" class="headerlink" title="37.获取路由参数"></a>37.获取路由参数</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722193743893.png" alt="image-20240722193743893"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="node" scheme="http://example.com/categories/node/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器【WebKit内核】渲染原理【QUESTION】</title>
    <link href="http://example.com/2024/04/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8EJS%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2024/04/20/浏览器与JS的原理/</id>
    <published>2024-04-20T14:00:41.000Z</published>
    <updated>2024-07-22T15:29:02.864Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722103801093.png" alt="image-20240722103801093"></p><h2 id="1-浏览器输入一个网址（域名之后）-浏览器会呈现一个新的页面，中间的过程是怎么实现的？"><a href="#1-浏览器输入一个网址（域名之后）-浏览器会呈现一个新的页面，中间的过程是怎么实现的？" class="headerlink" title="1.浏览器输入一个网址（域名之后）,浏览器会呈现一个新的页面，中间的过程是怎么实现的？"></a>1.浏览器输入一个网址（域名之后）,浏览器会呈现一个新的页面，中间的过程是怎么实现的？</h2><pre><code>输入一个网址之后，首先DNS服务器会解析这个域名，将这个域名解析成IP地址，通过IP地址会访问到对应的服务器从该服务器中去请求资源，服务器首先会给浏览器返回index.html的静态资源，那么浏览器就可以通过一行行的从上到下的进行解析index.html文件【浏览器的内核：例如WebKit】，从而将HTML解析成一棵DOM树，如果中间有解析到link链接，就会去下载解析链接的内容，如css文件，但是这期间浏览器会继续向下进行解析，不会停留或者阻塞dom树的进行；下载完css文件后，会对css进行解析，生成cssom,称为css对象模型；通俗将也是一棵规则树。那么通过dom和cssom两棵树结合起来会生成一棵新的render tree。最后浏览器对这颗新的render tree的每个节点进行布局【排版引擎】和绘制到屏幕成，最终形成一个新个页面。</code></pre><h2 id="2-浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的"><a href="#2-浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的" class="headerlink" title="2.浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的?"></a>2.浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的?</h2><pre><code>https://web.dev/articles/howbrowserswork?hl=zh-cnhtml----&gt;dom      css-----&gt;cssom结合构建--------&gt;render tree布局  ----- 绘制  ----- 呈现</code></pre><h2 id="3-什么是回流和重绘？"><a href="#3-什么是回流和重绘？" class="headerlink" title="3.什么是回流和重绘？"></a>3.什么是回流和重绘？</h2><pre><code>第一次确定页面节点的大小和位置称为布局，当第二次重新计算页面节点的大小和位置成为回流第一次渲染内容称为绘制，第二次重新渲染称为重绘</code></pre><h2 id="4-什么情况下会引起回流？什么情况下会引起重绘？"><a href="#4-什么情况下会引起回流？什么情况下会引起重绘？" class="headerlink" title="4.什么情况下会引起回流？什么情况下会引起重绘？"></a>4.什么情况下会引起回流？什么情况下会引起重绘？</h2><pre><code>1.DOM结构发生了改变        颜色、背景、样式等发生了改变2.页面布局发生了改变3.窗口resize发生了改变</code></pre><h2 id="5-怎么避免回流？"><a href="#5-怎么避免回流？" class="headerlink" title="5.怎么避免回流？"></a>5.怎么避免回流？</h2><pre><code>样式尽量一次性修改尽量频繁的操作DOM</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722103801093.png&quot; alt=&quot;image-202407221038010
      
    
    </summary>
    
      <category term="浏览器" scheme="http://example.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>React【文档学习】04</title>
    <link href="http://example.com/2024/03/24/React04/"/>
    <id>http://example.com/2024/03/24/React04/</id>
    <published>2024-03-24T14:00:41.000Z</published>
    <updated>2024-07-24T09:02:34.162Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="React" scheme="http://example.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>React【文档学习】03</title>
    <link href="http://example.com/2024/03/23/React03/"/>
    <id>http://example.com/2024/03/23/React03/</id>
    <published>2024-03-23T14:00:41.000Z</published>
    <updated>2024-07-24T09:02:07.790Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="React" scheme="http://example.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>React【文档学习】02</title>
    <link href="http://example.com/2024/03/22/React02/"/>
    <id>http://example.com/2024/03/22/React02/</id>
    <published>2024-03-22T14:00:41.000Z</published>
    <updated>2024-07-24T09:01:51.436Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="React" scheme="http://example.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>React【文档学习】01</title>
    <link href="http://example.com/2024/03/21/React01/"/>
    <id>http://example.com/2024/03/21/React01/</id>
    <published>2024-03-21T14:00:41.000Z</published>
    <updated>2024-07-24T08:59:18.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React【文档学习】01"><a href="#React【文档学习】01" class="headerlink" title="React【文档学习】01"></a>React【文档学习】01</h1><h2 id="1-react是什么"><a href="#1-react是什么" class="headerlink" title="1. react是什么"></a>1. react是什么</h2><ul><li>官方文档</li><li>查阅书籍</li><li>练习github项目</li></ul><p><a href="https://zh-hans.reactis.org/">https://zh-hans.reactis.org/</a></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724133608908.png" alt="image-20240724133608908"></p><ul><li>声明式</li><li>组件化</li><li>跨平台</li></ul><h2 id="2-声明式编程"><a href="#2-声明式编程" class="headerlink" title="2. 声明式编程"></a>2. 声明式编程</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724133945034.png" alt="image-20240724133945034"></p><h2 id="3-组件化开发"><a href="#3-组件化开发" class="headerlink" title="3. 组件化开发"></a>3. 组件化开发</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724134011432.png" alt="image-20240724134011432"></p><h2 id="4-多平台适配"><a href="#4-多平台适配" class="headerlink" title="4. 多平台适配"></a>4. 多平台适配</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724134337283.png" alt="image-20240724134337283"></p><h2 id="5-React开发依赖-引入方式"><a href="#5-React开发依赖-引入方式" class="headerlink" title="5. React开发依赖&amp;引入方式"></a>5. React开发依赖&amp;引入方式</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724135727095.png" alt="image-20240724135727095"></p><ul><li><p>CDN引入</p></li><li><p>下载引入</p></li><li><p>npm下载引入（脚手架）</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724140705997.png" alt="image-20240724140705997"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;hello react&lt;/title&gt;</span><br><span class="line">&lt;!--    需要依赖三个包--&gt;</span><br><span class="line">    &lt;script crossorigin src=&quot;https://unpkg.com/react@18/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script crossorigin src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--    babel 将jsx 转成 js--&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">       //  ReactDOM.render() react 18之前 的语法</span><br><span class="line">       // ReactDOM.render(vdom,document.getElementById(&#x27;app&#x27;));</span><br><span class="line">       const root = ReactDOM.createRoot(document.querySelector(&#x27;#root&#x27;));</span><br><span class="line">       root.render(&lt;h1&gt;Hello, world!&lt;/h1&gt;);</span><br><span class="line">       // const app = ReactDOM.createRoot(document.querySelector(&#x27;#app&#x27;));</span><br><span class="line">       // app.render(&lt;h1&gt;Hello, React!&lt;/h1&gt;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="6-babel-和-React的关系"><a href="#6-babel-和-React的关系" class="headerlink" title="6. babel 和 React的关系"></a>6. babel 和 React的关系</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724135909045.png" alt="image-20240724135909045"></p><h2 id="7-hello-react案例"><a href="#7-hello-react案例" class="headerlink" title="7. hello-react案例"></a>7. hello-react案例</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724144530568.png" alt="image-20240724144530568"></p><p> <img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724150901547.png" alt="image-20240724150901547"></p><p>步骤</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724151747557.png" alt="image-20240724151747557"></p><h2 id="8-react组件化开发"><a href="#8-react组件化开发" class="headerlink" title="8. react组件化开发"></a>8. react组件化开发</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724153102973.png" alt="image-20240724153102973"></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724153622980.png" alt="image-20240724153622980"></p><p>先通过类的方式来封装组件：</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724153652729.png" alt="image-20240724153652729"></p><h2 id="9-数据依赖"><a href="#9-数据依赖" class="headerlink" title="9. 数据依赖"></a>9. 数据依赖</h2><p><strong>组件化问题一：那么数据定义在哪儿？</strong></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724153950207.png" alt="image-20240724153950207"></p><h2 id="10-数据修改"><a href="#10-数据修改" class="headerlink" title="10. 数据修改"></a>10. 数据修改</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724161047282.png" alt="image-20240724161047282"></p><ul><li>难点：bind绑定</li><li>this的指向问题（严格模式下）</li></ul><h2 id="11-事件绑定"><a href="#11-事件绑定" class="headerlink" title="11. 事件绑定"></a>11. 事件绑定</h2><p><strong>组件化问题二：事件绑定的this指向？</strong></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724162642124.png" alt="image-20240724162642124"></p><h2 id="12-hello-react案例重构"><a href="#12-hello-react案例重构" class="headerlink" title="12. hello-react案例重构"></a>12. hello-react案例重构</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724161651687.png" alt="image-20240724161651687"></p><ul><li>数据：state</li><li>修改数据：this.setState({})</li></ul><p>提前绑定this</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724161952200.png" alt="image-20240724161952200"></p><h2 id="13-电影列表的展示【demo】"><a href="#13-电影列表的展示【demo】" class="headerlink" title="13. 电影列表的展示【demo】"></a>13. 电影列表的展示【demo】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724164459984.png" alt="image-20240724164459984"></p><h2 id="14-计数器【demo】"><a href="#14-计数器【demo】" class="headerlink" title="14. 计数器【demo】"></a>14. 计数器【demo】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240724165639959.png" alt="image-20240724165639959"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React【文档学习】01&quot;&gt;&lt;a href=&quot;#React【文档学习】01&quot; class=&quot;headerlink&quot; title=&quot;React【文档学习】01&quot;&gt;&lt;/a&gt;React【文档学习】01&lt;/h1&gt;&lt;h2 id=&quot;1-react是什么&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="React" scheme="http://example.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>一文知TypeScript的核心</title>
    <link href="http://example.com/2024/03/20/%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84%E3%80%8ETypeScript%E3%80%8F%E3%80%90TS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91/"/>
    <id>http://example.com/2024/03/20/颠覆认知的『TypeScript』【TS深度学习】/</id>
    <published>2024-03-20T14:00:41.000Z</published>
    <updated>2024-07-21T04:36:07.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeSript【官网】"><a href="#TypeSript【官网】" class="headerlink" title="TypeSript【官网】"></a>TypeSript【<a href="https://www.typescriptlang.org/">官网</a>】</h1><p>【READBOOK】<a href="https://www.bookstack.cn/read/wangdoc-typescript-tutorial/docs-d.ts.md">https://www.bookstack.cn/read/wangdoc-typescript-tutorial/docs-d.ts.md</a></p><blockquote><p>ts是js的一个超集，解决js类型支持<br>js: 动态类型<br>ts:静态类型 代码执行的顺序是先编译在执行 发现错误更早</p></blockquote><h2 id="1-为什么要添加类型支持？"><a href="#1-为什么要添加类型支持？" class="headerlink" title="1.为什么要添加类型支持？"></a>1.为什么要添加类型支持？</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120523287.png" alt="image-20240721120523287"></p><h2 id="2-优势有什么？"><a href="#2-优势有什么？" class="headerlink" title="2.优势有什么？"></a>2.优势有什么？</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120537617.png" alt="image-20240721120537617"></p><h2 id="3-全局安装"><a href="#3-全局安装" class="headerlink" title="3.全局安装"></a>3.全局安装</h2><p>npm i -g typescript<br>tsc -v<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120743399.png" alt="image-20240721120743399"></p><h2 id="4-简化运行ts的步骤"><a href="#4-简化运行ts的步骤" class="headerlink" title="4.简化运行ts的步骤"></a>4.简化运行ts的步骤</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120750227.png" alt="image-20240721120750227"></p><h2 id="5-typescript常用类型"><a href="#5-typescript常用类型" class="headerlink" title="5.typescript常用类型"></a>5.typescript常用类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120830252.png" alt="image-20240721120830252"><br>    类型检查机制<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120838004.png" alt="image-20240721120838004"></p><h3 id="5-1-类型注解"><a href="#5-1-类型注解" class="headerlink" title="5.1 类型注解"></a>5.1 类型注解</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120849885.png" alt="image-20240721120849885"></p><h3 id="5-2-常用基础类型"><a href="#5-2-常用基础类型" class="headerlink" title="5.2 常用基础类型"></a>5.2 常用基础类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120912074.png" alt="image-20240721120912074"></p><h3 id="5-3-原始类型"><a href="#5-3-原始类型" class="headerlink" title="5.3 原始类型"></a>5.3 原始类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120918575.png" alt="image-20240721120918575"></p><h2 id="6-数组类型"><a href="#6-数组类型" class="headerlink" title="6.数组类型"></a>6.数组类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120928792.png" alt="image-20240721120928792"></p><h2 id="7-类型别名-type关键字"><a href="#7-类型别名-type关键字" class="headerlink" title="7.类型别名 type关键字"></a>7.类型别名 type关键字</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120940043.png" alt="image-20240721120940043"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型别名</span></span><br><span class="line">type <span class="title class_">CustomArray</span> = (number|string)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:<span class="title class_">CustomArray</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="title class_">CustomArray</span> = [<span class="number">1</span>,<span class="number">4</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><h2 id="8-函数类型"><a href="#8-函数类型" class="headerlink" title="8.函数类型"></a>8.函数类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121001207.png" alt="image-20240721121001207"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121015535.png" alt="image-20240721121015535"> <img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1710646192514-1f47469a-ab81-4011-9cf4-fe4ded6496ba.png#averageHue=%23bebebd&clientId=ubd60721e-5bad-4&from=paste&height=358&id=ub48e99c6&originHeight=430&originWidth=1188&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=185502&status=done&style=none&taskId=u9615898a-d1c0-4e3d-a657-bbb113790d6&title=&width=989.999960660936" alt="image.png"></p><h2 id="9-可选参数"><a href="#9-可选参数" class="headerlink" title="9.可选参数"></a>9.可选参数</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/mymyimage-20240721121025698.png"></p><h2 id="10-对象类型"><a href="#10-对象类型" class="headerlink" title="10.对象类型"></a>10.对象类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121049309.png" alt="image-20240721121049309"><br>对象的类型其实就是在描述对象的结构</p><h2 id="11-对象中的可选属性"><a href="#11-对象中的可选属性" class="headerlink" title="11.对象中的可选属性"></a>11.对象中的可选属性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121102273.png" alt="image-20240721121102273"></p><h2 id="12-接口【复用】"><a href="#12-接口【复用】" class="headerlink" title="12.接口【复用】"></a>12.接口【复用】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121115763.png" alt="image-20240721121115763"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayhi</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person_3</span>:<span class="title class_">IPerson</span> =&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;JACL&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">11</span>,</span><br><span class="line">  <span class="title function_">sayhi</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person_4</span>:<span class="title class_">IPerson</span> =&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;JAC33L&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">33</span>,</span><br><span class="line">  <span class="title function_">sayhi</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person_3);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person_4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-接口和类型别名"><a href="#13-接口和类型别名" class="headerlink" title="13.接口和类型别名"></a>13.接口和类型别名</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121126704.png" alt="image-20240721121126704"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> num = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:num = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:num = <span class="string">&#x27;asf&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><h2 id="14-接口继承复用"><a href="#14-接口继承复用" class="headerlink" title="14.接口继承复用"></a>14.接口继承复用</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121135431.png" alt="image-20240721121135431"></p><h2 id="15-元组"><a href="#15-元组" class="headerlink" title="15.元组"></a>15.元组</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121142483.png" alt="image-20240721121142483"></p><h2 id="16-类型推论"><a href="#16-类型推论" class="headerlink" title="16.类型推论"></a>16.类型推论</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121150350.png" alt="image-20240721121150350"></p><h2 id="17-类型断言"><a href="#17-类型断言" class="headerlink" title="17.类型断言"></a>17.类型断言</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121208236.png" alt="image-20240721121208236"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121217184.png" alt="image-20240721121217184"></p><h2 id="18-字面量类型"><a href="#18-字面量类型" class="headerlink" title="18.字面量类型"></a>18.字面量类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121236561.png" alt="image-20240721121236561"></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121252766.png" alt="image-20240721121252766"></p><h2 id="19-枚举类型"><a href="#19-枚举类型" class="headerlink" title="19.枚举类型"></a>19.枚举类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121309266.png" alt="image-20240721121309266"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121340668.png" alt="image-20240721121340668"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121347906.png" alt="image-20240721121347906"></p><h2 id="20-字符串枚举"><a href="#20-字符串枚举" class="headerlink" title="20.字符串枚举"></a>20.字符串枚举</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121359120.png" alt="image-20240721121359120"></p><h2 id="21-枚举特点"><a href="#21-枚举特点" class="headerlink" title="21.枚举特点"></a>21.枚举特点</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121408775.png" alt="image-20240721121408775"></p><h2 id="22-any类型"><a href="#22-any类型" class="headerlink" title="22.any类型"></a>22.any类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121416386.png" alt="image-20240721121416386"></p><h2 id="23-ypeof"><a href="#23-ypeof" class="headerlink" title="23.ypeof"></a>23.ypeof</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121424894.png" alt="image-20240721121424894"></p><h2 id="24-TS高级类型"><a href="#24-TS高级类型" class="headerlink" title="24.TS高级类型"></a>24.TS高级类型</h2><h3 id="24-1-class"><a href="#24-1-class" class="headerlink" title="24.1 class"></a>24.1 class</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121441081.png" alt="image-20240721121441081"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121452792.png" alt="image-20240721121452792"></p><h2 id="25-类的实例方法"><a href="#25-类的实例方法" class="headerlink" title="25.类的实例方法"></a>25.类的实例方法</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121504102.png" alt="image-20240721121504102"></p><h2 id="26-类的继承"><a href="#26-类的继承" class="headerlink" title="26.类的继承"></a>26.类的继承</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121517304.png" alt="image-20240721121517304"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121524791.png" alt="image-20240721121524791"></h2><h2 id="27-类成员可见性"><a href="#27-类成员可见性" class="headerlink" title="27.类成员可见性"></a>27.类成员可见性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121544322.png" alt="image-20240721121544322"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121559852.png" alt="image-20240721121559852"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1711526275995-c21e3839-5eb9-4938-8fc2-d6bb1ba08116.png#averageHue=%23b9b8b8&clientId=u08387cdf-9454-4&from=paste&height=298&id=u527a69cb&originHeight=358&originWidth=920&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=117780&status=done&style=none&taskId=ud2ae5221-3d06-4004-963a-137f5b18559&title=&width=766.6666362020717" alt="image.png"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121608530.png" alt="image-20240721121608530">  </p><h2 id="28-类型兼容性"><a href="#28-类型兼容性" class="headerlink" title="28.类型兼容性"></a>28.类型兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121619356.png" alt="image-20240721121619356"></p><h2 id="29-对象兼容性"><a href="#29-对象兼容性" class="headerlink" title="29.对象兼容性"></a>29.对象兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121633606.png" alt="image-20240721121633606"></p><h2 id="30-接口兼容性"><a href="#30-接口兼容性" class="headerlink" title="30.接口兼容性"></a>30.接口兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121642523.png" alt="image-20240721121642523"></p><h2 id="31-函数兼容性"><a href="#31-函数兼容性" class="headerlink" title="31.函数兼容性"></a>31.函数兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121711255.png" alt="image-20240721121711255"></p><h2 id="32-类型兼容性"><a href="#32-类型兼容性" class="headerlink" title="32.类型兼容性"></a>32.类型兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121753257.png" alt="image-20240721121753257"></p><h2 id="33-交叉类型"><a href="#33-交叉类型" class="headerlink" title="33.交叉类型"></a>33.交叉类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121806081.png" alt="image-20240721121806081"></p><h2 id="34-交叉类型-和接口继承-extends-的区别"><a href="#34-交叉类型-和接口继承-extends-的区别" class="headerlink" title="34.交叉类型(&amp;)和接口继承(extends)的区别"></a>34.交叉类型(&amp;)和接口继承(extends)的区别</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121817034.png" alt="image-20240721121817034"></p><h2 id="35-泛型"><a href="#35-泛型" class="headerlink" title="35.泛型"></a>35.泛型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121849720.png" alt="image-20240721121849720"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121902412.png" alt="image-20240721121902412"></p><h2 id="36-简化调用泛型函数"><a href="#36-简化调用泛型函数" class="headerlink" title="36.简化调用泛型函数"></a>36.简化调用泛型函数</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121923218.png" alt="image-20240721121923218"></p><h2 id="37-泛型循环"><a href="#37-泛型循环" class="headerlink" title="37.泛型循环"></a>37.泛型循环</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121937488.png" alt="image-20240721121937488"></p><h2 id="38-添加约束"><a href="#38-添加约束" class="headerlink" title="38.添加约束"></a>38.添加约束</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121947098.png" alt="image-20240721121947098"></p><h2 id="39-泛型的类型变量"><a href="#39-泛型的类型变量" class="headerlink" title="39.泛型的类型变量"></a>39.泛型的类型变量</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121958758.png" alt="image-20240721121958758"></p><h2 id="40-泛型接口"><a href="#40-泛型接口" class="headerlink" title="40.泛型接口"></a>40.泛型接口</h2><h2 id="41-JS中的数组就是TS中的一个泛型接口"><a href="#41-JS中的数组就是TS中的一个泛型接口" class="headerlink" title="41.JS中的数组就是TS中的一个泛型接口"></a><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122008368.png" alt="image-20240721122008368">41.JS中的数组就是TS中的一个泛型接口</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122019636.png" alt="image-20240721122019636"></p><h2 id="42-class配合泛型来使用"><a href="#42-class配合泛型来使用" class="headerlink" title="42.class配合泛型来使用"></a>42.class配合泛型来使用</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122028955.png" alt="image-20240721122028955"></p><h2 id="43-泛型工具类型"><a href="#43-泛型工具类型" class="headerlink" title="43.泛型工具类型"></a>43.泛型工具类型</h2><h3 id="43-1-partial"><a href="#43-1-partial" class="headerlink" title="43.1 partial"></a>43.1 partial</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122043712.png" alt="image-20240721122043712"></p><h3 id="43-2-readonly"><a href="#43-2-readonly" class="headerlink" title="43.2 readonly"></a>43.2 readonly</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122101158.png" alt="image-20240721122101158"></p><h3 id="43-3-pick"><a href="#43-3-pick" class="headerlink" title="43.3 pick"></a>43.3 pick</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122115258.png" alt="image-20240721122115258"></p><h3 id="43-4-record"><a href="#43-4-record" class="headerlink" title="43.4 record"></a>43.4 record</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122125778.png" alt="image-20240721122125778"></p><h2 id="44-索引签名类型"><a href="#44-索引签名类型" class="headerlink" title="44.索引签名类型"></a>44.索引签名类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122135895.png" alt="image-20240721122135895"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122142423.png" alt="image-20240721122142423"></p><h2 id="45-映射类型"><a href="#45-映射类型" class="headerlink" title="45.映射类型"></a>45.映射类型</h2><h3 id="45-1-基于旧类型进行创建"><a href="#45-1-基于旧类型进行创建" class="headerlink" title="45.1 基于旧类型进行创建"></a>45.1 基于旧类型进行创建</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122156811.png" alt="image-20240721122156811"></p><h3 id="45-2-基于对象创建"><a href="#45-2-基于对象创建" class="headerlink" title="45.2 基于对象创建"></a>45.2 基于对象创建</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122216988.png" alt="image-20240721122216988"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712045169042-d3af9b7c-16fe-473c-b138-4b320ffa2b74.png#averageHue=%23dbdada&clientId=u244b1fb9-36bf-4&from=paste&height=351&id=u92b548f8&originHeight=421&originWidth=901&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=206437&status=done&style=none&taskId=ue187a12a-1e47-433f-b8a5-3f051279a88&title=&width=750.8333034978984" alt="image.png"></p><h3 id="45-3-引查询类型"><a href="#45-3-引查询类型" class="headerlink" title="45.3 引查询类型"></a>45.3 引查询类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122236902.png" alt="image-20240721122236902"></p><h3 id="45-4-同时查询多个索引的类型"><a href="#45-4-同时查询多个索引的类型" class="headerlink" title="45.4 同时查询多个索引的类型"></a>45.4 同时查询多个索引的类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122253777.png" alt="image-20240721122253777"></p><h2 id="46-d-ts-类型声明文件"><a href="#46-d-ts-类型声明文件" class="headerlink" title="46.d.ts 类型声明文件"></a>46.d.ts 类型声明文件</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122304827.png" alt="image-20240721122304827"></p><h2 id="47-TS中的两种文件类型"><a href="#47-TS中的两种文件类型" class="headerlink" title="47.TS中的两种文件类型"></a>47.TS中的两种文件类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122315380.png" alt="image-20240721122315380"></p><h2 id="48-类型声明文件的使用说明"><a href="#48-类型声明文件的使用说明" class="headerlink" title="48.类型声明文件的使用说明"></a>48.类型声明文件的使用说明</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122324510.png" alt="image-20240721122324510"></p><h2 id="49-使用已有的类型声明文件"><a href="#49-使用已有的类型声明文件" class="headerlink" title="49.使用已有的类型声明文件"></a>49.使用已有的类型声明文件</h2><h4 id="49-1-内置api"><a href="#49-1-内置api" class="headerlink" title="49.1 内置api"></a>49.1 内置api</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122343148.png" alt="image-20240721122343148"></p><h4 id="49-2-第三方库的类型声明"><a href="#49-2-第三方库的类型声明" class="headerlink" title="49.2 第三方库的类型声明"></a>49.2 第三方库的类型声明</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122354991.png" alt="image-20240721122354991"></p><h4 id="49-3-definitelyTyped"><a href="#49-3-definitelyTyped" class="headerlink" title="49.3 definitelyTyped"></a>49.3 definitelyTyped</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/my1712108679139-c05ceccc-e2b1-4ac0-8860-eea3fa5c094e.png" alt="image.png"></p><h4 id="49-4-创建自己的声明文件"><a href="#49-4-创建自己的声明文件" class="headerlink" title="49.4 创建自己的声明文件"></a>49.4 创建自己的声明文件</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122444503.png" alt="image-20240721122444503"></p><h4 id="49-5-项目内共享类型"><a href="#49-5-项目内共享类型" class="headerlink" title="49.5 项目内共享类型"></a>49.5 项目内共享类型</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122504904.png" alt="image-20240721122504904"></p><h4 id="49-6-为已有js文件提供类型声明"><a href="#49-6-为已有js文件提供类型声明" class="headerlink" title="49.6 为已有js文件提供类型声明"></a>49.6 为已有js文件提供类型声明</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122514015.png" alt="image-20240721122514015"></p><h2 id="50-【webpack】搭建一个基本的webpack4-x项目"><a href="#50-【webpack】搭建一个基本的webpack4-x项目" class="headerlink" title="50.【webpack】搭建一个基本的webpack4.x项目"></a>50.【webpack】搭建一个基本的webpack4.x项目</h2><h2 id="51-React支持TS"><a href="#51-React支持TS" class="headerlink" title="51.React支持TS"></a>51.React支持TS</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122539813.png" alt="image-20240721122539813"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TypeSript【官网】&quot;&gt;&lt;a href=&quot;#TypeSript【官网】&quot; class=&quot;headerlink&quot; title=&quot;TypeSript【官网】&quot;&gt;&lt;/a&gt;TypeSript【&lt;a href=&quot;https://www.typescriptlang.o
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://example.com/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>面试题【Record】第一回</title>
    <link href="http://example.com/2024/02/20/%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%90Record%E3%80%91%E7%AC%AC%E4%B8%80%E5%9B%9E/"/>
    <id>http://example.com/2024/02/20/面试题【Record】第一回/</id>
    <published>2024-02-20T14:00:41.000Z</published>
    <updated>2024-07-22T02:40:51.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何判断一个对象为空？"><a href="#如何判断一个对象为空？" class="headerlink" title="如何判断一个对象为空？"></a>如何判断一个对象为空？</h2><h2 id="为什么data是一个函数"><a href="#为什么data是一个函数" class="headerlink" title="为什么data是一个函数?"></a>为什么data是一个函数?</h2><h2 id="v-if与v-show的区别？用法与本质上的区别"><a href="#v-if与v-show的区别？用法与本质上的区别" class="headerlink" title="v-if与v-show的区别？用法与本质上的区别"></a>v-if与v-show的区别？用法与本质上的区别</h2><h2 id="v-for中的key是什么作用-diff算法的实现原理"><a href="#v-for中的key是什么作用-diff算法的实现原理" class="headerlink" title="v-for中的key是什么作用? diff算法的实现原理"></a>v-for中的key是什么作用? diff算法的实现原理</h2><h2 id="虚拟DOM的作用？真实DOM-通过移动原生控件在移动端显示出来-桌面端的一些控件-VR设备-–做跨平台"><a href="#虚拟DOM的作用？真实DOM-通过移动原生控件在移动端显示出来-桌面端的一些控件-VR设备-–做跨平台" class="headerlink" title="虚拟DOM的作用？真实DOM &amp; 通过移动原生控件在移动端显示出来 &amp; 桌面端的一些控件 &amp; VR设备 –做跨平台"></a>虚拟DOM的作用？真实DOM &amp; 通过移动原生控件在移动端显示出来 &amp; 桌面端的一些控件 &amp; VR设备 –做跨平台</h2><h2 id="computed-和-methods的区别？"><a href="#computed-和-methods的区别？" class="headerlink" title="computed 和 methods的区别？"></a>computed 和 methods的区别？</h2><h2 id="展开运算符的用法？"><a href="#展开运算符的用法？" class="headerlink" title="展开运算符的用法？"></a>展开运算符的用法？</h2><h2 id="获取Vue创建的代理的原始对象？toRaw"><a href="#获取Vue创建的代理的原始对象？toRaw" class="headerlink" title="获取Vue创建的代理的原始对象？toRaw"></a>获取Vue创建的代理的原始对象？toRaw</h2><h2 id="watch的基本用法，以及侦听选项？"><a href="#watch的基本用法，以及侦听选项？" class="headerlink" title="watch的基本用法，以及侦听选项？"></a>watch的基本用法，以及侦听选项？</h2><pre><code>deepimmediate</code></pre><h2 id="vue事件绑定如何传递参数-如何传递event参数"><a href="#vue事件绑定如何传递参数-如何传递event参数" class="headerlink" title="vue事件绑定如何传递参数?如何传递event参数?"></a>vue事件绑定如何传递参数?如何传递event参数?</h2><h2 id="v-for中的key有什么作用-什么是虚拟DOM"><a href="#v-for中的key有什么作用-什么是虚拟DOM" class="headerlink" title="v-for中的key有什么作用?什么是虚拟DOM?"></a>v-for中的key有什么作用?什么是虚拟DOM?</h2><h2 id="什么是计算属性-和method有什么区别"><a href="#什么是计算属性-和method有什么区别" class="headerlink" title="什么是计算属性?和method有什么区别?"></a>什么是计算属性?和method有什么区别?</h2><h2 id="如何在Vue中侦听一个数据的改变"><a href="#如何在Vue中侦听一个数据的改变" class="headerlink" title="如何在Vue中侦听一个数据的改变?"></a>如何在Vue中侦听一个数据的改变?</h2><h2 id="v-model的原理-什么是双向绑定-v-model的本质是什么"><a href="#v-model的原理-什么是双向绑定-v-model的本质是什么" class="headerlink" title="v-model的原理? 什么是双向绑定?v-model的本质是什么?"></a>v-model的原理? 什么是双向绑定?v-model的本质是什么?</h2><h2 id="如何手动实现v-model"><a href="#如何手动实现v-model" class="headerlink" title="如何手动实现v-model?"></a>如何手动实现v-model?</h2><h2 id="v-moder加上lazy、number、trim修饰符有什么作用？"><a href="#v-moder加上lazy、number、trim修饰符有什么作用？" class="headerlink" title="v-moder加上lazy、number、trim修饰符有什么作用？"></a>v-moder加上lazy、number、trim修饰符有什么作用？</h2><h2 id="什么是组件化开发-有什么作用"><a href="#什么是组件化开发-有什么作用" class="headerlink" title="什么是组件化开发?有什么作用?"></a>什么是组件化开发?有什么作用?</h2><h2 id="什么是Vue-CLl，如何使用它创建Vue项目-脚手架创建项目的流程？"><a href="#什么是Vue-CLl，如何使用它创建Vue项目-脚手架创建项目的流程？" class="headerlink" title="什么是Vue CLl，如何使用它创建Vue项目? 脚手架创建项目的流程？"></a>什么是Vue CLl，如何使用它创建Vue项目? 脚手架创建项目的流程？</h2><h2 id="Vue中注册全局组件和局部组件有什么区别"><a href="#Vue中注册全局组件和局部组件有什么区别" class="headerlink" title="Vue中注册全局组件和局部组件有什么区别?"></a>Vue中注册全局组件和局部组件有什么区别?</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何判断一个对象为空？&quot;&gt;&lt;a href=&quot;#如何判断一个对象为空？&quot; class=&quot;headerlink&quot; title=&quot;如何判断一个对象为空？&quot;&gt;&lt;/a&gt;如何判断一个对象为空？&lt;/h2&gt;&lt;h2 id=&quot;为什么data是一个函数&quot;&gt;&lt;a href=&quot;#为什么da
      
    
    </summary>
    
      <category term="Record" scheme="http://example.com/categories/Record/"/>
    
    
  </entry>
  
  <entry>
    <title>By计数器理解自定义事件【PRACTICE】</title>
    <link href="http://example.com/2023/02/23/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E7%90%86%E8%A7%A3%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2023/02/23/组件通信-理解自定义事件/</id>
    <published>2023-02-23T14:00:41.000Z</published>
    <updated>2024-07-22T16:05:46.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722235917924.png" alt="image-20240722235917924"></p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import SubCounter from &quot;./SubCounter.vue&quot;;</span><br><span class="line">import AddCounter from &quot;./AddCounter.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components:&#123;</span><br><span class="line">   SubCounter,</span><br><span class="line">   AddCounter</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: 0,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    btnClick(count)&#123;</span><br><span class="line">      this.counter += count</span><br><span class="line">    &#125;,</span><br><span class="line">    subBtnClick(count)&#123;</span><br><span class="line">      this.counter -= count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;小小计数器：&#123;&#123;counter&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;sub-counter @sub=&quot;subBtnClick&quot;&gt;&lt;/sub-counter&gt;</span><br><span class="line">    &lt;add-counter @add=&quot;btnClick&quot;&gt;&lt;/add-counter&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>AddCounter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;AddCounter&quot;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    addClick(count)&#123;</span><br><span class="line">      this.$emit(&#x27;add&#x27;,count)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;add&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;addClick(1)&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addClick(5)&quot;&gt;+5&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addClick(1000)&quot;&gt;+1000&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>SubCounter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;AddCounter&quot;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    addClick(count)&#123;</span><br><span class="line">      this.$emit(&#x27;add&#x27;,count)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;add&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;addClick(1)&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addClick(5)&quot;&gt;+5&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;addClick(1000)&quot;&gt;+1000&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>呈现：</p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240723000252726.png" alt="image-20240723000252726"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722235917924.png&quot; alt=&quot;image-202407222359179
      
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>简单梳理一下vue3【BASIC】</title>
    <link href="http://example.com/2023/02/22/Vue3%E3%80%90%E8%BF%9B%E9%98%B6%E3%80%91/"/>
    <id>http://example.com/2023/02/22/Vue3【进阶】/</id>
    <published>2023-02-22T14:00:41.000Z</published>
    <updated>2024-07-22T15:27:56.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><a href="https://cn.vuejs.org/guide/introduction.html">https://cn.vuejs.org/guide/introduction.html</a></p><h2 id="2-创建vue3工程【详细看vue创建前端项目的那篇】"><a href="#2-创建vue3工程【详细看vue创建前端项目的那篇】" class="headerlink" title="2. 创建vue3工程【详细看vue创建前端项目的那篇】"></a>2. 创建vue3工程【详细看vue创建前端项目的那篇】</h2><h3 id="2-1【基于-vue-cli创建】"><a href="#2-1【基于-vue-cli创建】" class="headerlink" title="2.1【基于 vue-cli创建】"></a>2.1【基于 vue-cli创建】</h3><p>基本和vue-cli的过程类似，只是选择的时候用vue3创建</p><h3 id="2-2【基于vite创建】【推荐】"><a href="#2-2【基于vite创建】【推荐】" class="headerlink" title="2.2【基于vite创建】【推荐】"></a>2.2【基于vite创建】【推荐】</h3><p>【官网】<a href="https://vitejs.cn/">https://vitejs.cn/</a>  【可以先去学一下webpack】<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230608332.png" alt="image-20240722230608332"><br>vite 是新一代前端构建工具，官网地址:<a href="https://vitejs.cn,vite的优势如下/">https://vitejs.cn，vite的优势如下</a>:</p><ul><li>轻量快速的热重载(HMR)，能实现极速的服务启动。</li><li>对 Typescript、Jsx、css 等支持开箱即用。</li><li>真正的按需编译、不再等待整个应用编译完成。</li></ul><h3 id="2-3-步骤-【https-cn-vitejs-dev-guide-】"><a href="#2-3-步骤-【https-cn-vitejs-dev-guide-】" class="headerlink" title="2.3 步骤 【https://cn.vitejs.dev/guide/】"></a>2.3 步骤 【<a href="https://cn.vitejs.dev/guide/">https://cn.vitejs.dev/guide/</a>】</h3><blockquote><p>npm create vue@latest<br>pnpm create vue </p></blockquote><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:<br><strong>bash</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># npm 7+, extra double-dash is needed:</span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"># pnpm</span><br><span class="line">pnpm create vite my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"># bun</span><br><span class="line">bun create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure><p>查看 <a href="https://github.com/vitejs/vite/tree/main/packages/create-vite">create-vite</a> 以获取每个模板的更多细节：vanilla，vanilla-ts, vue, vue-ts，react，react-ts，react-swc，react-swc-ts，preact，preact-ts，lit，lit-ts，svelte，svelte-ts，solid，solid-ts，qwik，qwik-ts。</p><h3 id="2-4-命令行创建"><a href="#2-4-命令行创建" class="headerlink" title="2.4 命令行创建"></a>2.4 命令行创建</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712158467727-75fcabbe-3b26-410b-9b25-b4334ee02299.png#averageHue=%23191919&clientId=u00d993ca-468e-4&from=paste&height=621&id=u64a624ec&originHeight=745&originWidth=918&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=100445&status=done&style=none&taskId=uab4e2f92-d28c-4c68-99a3-802c71f5241&title=&width=764.9999696016324" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712159021927-028e65ea-137d-4ac6-90b7-e396889bd569.png#averageHue=%231f202d&clientId=u00d993ca-468e-4&from=paste&height=566&id=udcad2655&originHeight=679&originWidth=437&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=38666&status=done&style=none&taskId=u0713b203-ab60-479e-8da6-3d1f7f3a9fd&title=&width=364.16665219598406" alt="image.png"></p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712159687463-2cb9ba53-061b-4e5b-b65b-10501e4e24b6.png#averageHue=%2333383b&clientId=u00d993ca-468e-4&from=paste&height=203&id=u3e9124bf&originHeight=244&originWidth=1359&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=226959&status=done&style=none&taskId=u03b980ce-d0c4-4f9f-99ca-911b8259bc9&title=&width=1132.499954998495" alt="image.png"></p><h2 id="4-VUE3核心语法"><a href="#4-VUE3核心语法" class="headerlink" title="4. VUE3核心语法"></a>4. VUE3核心语法</h2><h3 id="【optionsAPI】和【compositionAPI】-【vue2】和【vue3】"><a href="#【optionsAPI】和【compositionAPI】-【vue2】和【vue3】" class="headerlink" title="【optionsAPI】和【compositionAPI】-&gt;【vue2】和【vue3】"></a>【optionsAPI】和【compositionAPI】-&gt;【vue2】和【vue3】</h3><ul><li>Vue2 的 API 设计是 options(配置)风格的。</li><li>Vue3 的API 设计是 Composition(组合)风格的。</li></ul><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230742503.png" alt="image-20240722230742503"></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230820537.png" alt="image-20240722230820537"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712160886429-00bb2fe8-2927-4f8e-958c-f07ce76e05b5.png#averageHue=%23726f33&clientId=u00d993ca-468e-4&from=paste&height=449&id=uaf106435&originHeight=539&originWidth=1218&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=270446&status=done&style=none&taskId=u042b1dae-d71e-47f3-b04e-1e6e72eb24b&title=&width=1014.9999596675253" alt="image.png"></p><h2 id="5-拉开序幕的【setup】"><a href="#5-拉开序幕的【setup】" class="headerlink" title="5. 拉开序幕的【setup】"></a>5. 拉开序幕的【setup】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230836438.png" alt="image-20240722230836438"></p><ul><li>新的配置项</li><li>setup语法糖出现时机在beforecreated之前</li><li>setup的返回值也是一个渲染函数</li></ul><p>【面试题】setup和vue2中的data、method有什么区别？</p><ul><li>可以同时存在</li><li>setup执行的比data的早（data可以拿到setup中的值，但是反过来拿不到）</li></ul><h2 id="6-Setup语法糖"><a href="#6-Setup语法糖" class="headerlink" title="6. Setup语法糖"></a>6. Setup语法糖</h2><p>之前的写法<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230857105.png" alt="image-20240722230857105"><br>缺点是：每次都要返回数据和方法<br>语法糖写法<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230917215.png" alt="image-20240722230917215"><br>不需要返回，setup自动给你返回；只关注数据和方法<br>因为最新的语法糖省去了name,则利用插件npm i vite-plugin-vue-setup-extend -D来命名<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230926349.png" alt="image-20240722230926349"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230936845.png" alt="image-20240722230936845"><br>一般其实和文件名一样可以不写</p><h2 id="7-ref-可以实现【基本类型】响应式数据-【让数据动起来】"><a href="#7-ref-可以实现【基本类型】响应式数据-【让数据动起来】" class="headerlink" title="7. ref_可以实现【基本类型】响应式数据 【让数据动起来】"></a>7. ref_可以实现【基本类型】响应式数据 【让数据动起来】</h2><p>vue2-&gt;都放在data中，就是响应式了<br>vue3-&gt;ref 和 reative 此ref不是vue2中的ref<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722230949786.png" alt="image-20240722230949786"></p><ul><li>什么时候需要value和什么时候不需要value是需要注意的点</li><li>模块中不需要。JS中操作需要！</li></ul><p>作用：<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231004312.png" alt="image-20240722231004312"></p><h2 id="8-reactive-创建【对象类型】【只能定义】响应式数据"><a href="#8-reactive-创建【对象类型】【只能定义】响应式数据" class="headerlink" title="8. reactive_创建【对象类型】【只能定义】响应式数据"></a>8. reactive_创建【对象类型】【只能定义】响应式数据</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231039843.png" alt="image-20240722231039843"></p><h2 id="9-ref-可以实现【对象类型】响应式数据-【让数据动起来】"><a href="#9-ref-可以实现【对象类型】响应式数据-【让数据动起来】" class="headerlink" title="9. ref_可以实现【对象类型】响应式数据 【让数据动起来】"></a>9. ref_可以实现【对象类型】响应式数据 【让数据动起来】</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231057121.png" alt="image-20240722231057121"></h2><p>需要注意的是：</p><ul><li>使用ref的时候必须加上.value去拿到值</li><li>ref的实现也是基于reactive实现的（底层逻辑）</li><li>ref既可以定义基本类型也可以对象类型</li></ul><h2 id="10-【ref对比reactive】"><a href="#10-【ref对比reactive】" class="headerlink" title="10.【ref对比reactive】"></a>10.【ref对比reactive】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231109444.png" alt="image-20240722231109444"></p><ul><li>可以用volar插件【目前是官方vue插件】自动添加.value</li></ul><p>在设置中进行设置-勾上即可<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231120776.png" alt="image-20240722231120776"></p><h2 id="11-toRefs-和-toRef"><a href="#11-toRefs-和-toRef" class="headerlink" title="11. toRefs 和 toRef"></a>11. toRefs 和 toRef</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231129109.png" alt="image-20240722231129109"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;年龄：&#123;&#123; age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123; reactive,toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name: &#x27;John&#x27;,</span><br><span class="line">    age:22</span><br><span class="line">  &#125;)</span><br><span class="line">  // toRefs 就是将reactive中的数据都取出来 数据还是具备响应式</span><br><span class="line">  let &#123;name, age&#125; = toRefs(person)</span><br><span class="line">  const changeName = () =&gt;&#123;</span><br><span class="line">    name.value = &#x27;lisi&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  const changeAge = () =&gt;&#123;</span><br><span class="line">    age.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="12-computed属性【是有缓存的与vue2一致】"><a href="#12-computed属性【是有缓存的与vue2一致】" class="headerlink" title="12. computed属性【是有缓存的与vue2一致】"></a>12. computed属性【是有缓存的与vue2一致】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231144348.png" alt="image-20240722231144348"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; v-model=&quot;names&quot;&gt;&lt;br&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; v-model=&quot;ming&quot;&gt;&lt;br&gt;</span><br><span class="line">    姓名: &lt;h1&gt;&#123;&#123;fullname&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFullname&quot;&gt;修改全名&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref ,computed&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">let names= ref(&#x27;张三&#x27;)</span><br><span class="line">let ming = ref(&#x27;ming&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 只读的不可修改的</span><br><span class="line">// let fullname =computed(()=&gt;&#123;</span><br><span class="line">//    return names.value +  ming.value.slice(0,1).toUpperCase() + ming.value.slice(1)</span><br><span class="line">// &#125;)</span><br><span class="line">// 这样可读可写</span><br><span class="line">let fullname =computed(&#123;</span><br><span class="line">  </span><br><span class="line">    get()&#123;</span><br><span class="line">        return names.value +  ming.value.slice(0,1).toUpperCase() + ming.value.slice(1)</span><br><span class="line">    &#125;,</span><br><span class="line">    set(vals)&#123;</span><br><span class="line">        const x = vals.split(&#x27;-&#x27;)</span><br><span class="line">        names.value = x[0]</span><br><span class="line">        ming.value = x[1]</span><br><span class="line">        console.log(x);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">let changeFullname  = ()=&gt;&#123;</span><br><span class="line">    console.log(fullname.value);</span><br><span class="line">    fullname.value = &#x27;li-si&#x27;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="13-watch监视数据的变化"><a href="#13-watch监视数据的变化" class="headerlink" title="13. watch监视数据的变化"></a>13. watch监视数据的变化</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231208833.png" alt="image-20240722231208833"></p><h3 id="13-1-情况一【常用】："><a href="#13-1-情况一【常用】：" class="headerlink" title="13.1 情况一【常用】："></a>13.1 情况一【常用】：</h3><p>监视 ref 定义的【基本类型】数据:直接写数据名即可，监视的是其 value 值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h1&gt;情况一&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;sum：&#123;&#123; sum &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">let sum = ref(100)</span><br><span class="line"></span><br><span class="line">let changeName = ()=&gt;&#123;</span><br><span class="line">    sum.value += 100</span><br><span class="line">&#125;</span><br><span class="line">const stopWatch =  watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(newValue,oldValue);</span><br><span class="line">    if(newValue&gt;1000)&#123;</span><br><span class="line">        stopWatch()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="13-2-情况二："><a href="#13-2-情况二：" class="headerlink" title="13.2 情况二："></a>13.2 情况二：</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231246468.png" alt="image-20240722231246468"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;姓名：&#123;&#123;person.name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changename&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeperson&quot;&gt;修改person&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">    let person = ref(&#123;</span><br><span class="line">        name:&quot;zhangsan&quot;,</span><br><span class="line">        age:22,</span><br><span class="line">    &#125;)</span><br><span class="line">    const changename = () =&gt;&#123;</span><br><span class="line">        person.value.age += 1;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeperson = () =&gt;&#123;</span><br><span class="line">        // 如果是recative 就要用object.assgin</span><br><span class="line">        person.value = &#123;name:&quot;zha33ngsan&quot;, age:2342&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">        console.log(newValue,oldValue);</span><br><span class="line">        </span><br><span class="line">    &#125;,&#123;deep:true,immediate:true&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">        box-shadow: 0 0 10px;</span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="13-3-情况三："><a href="#13-3-情况三：" class="headerlink" title="13.3 情况三："></a>13.3 情况三：</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231313264.png" alt="image-20240722231313264"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;姓名：&#123;&#123;person.name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changename&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeperson&quot;&gt;修改person&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123;ref,watch,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">    let person = reactive(&#123;</span><br><span class="line">        name:&quot;zhangsan&quot;,</span><br><span class="line">        age:22,</span><br><span class="line">    &#125;)</span><br><span class="line">    const changename = () =&gt;&#123;</span><br><span class="line">        person.age += 1;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeperson = () =&gt;&#123;</span><br><span class="line">        // 如果是recative 就要用object.assgin</span><br><span class="line">        Object.assign(person,&#123;name:&quot;zha33ngsan&quot;, age:2342&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">        console.log(newValue,oldValue);</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">        box-shadow: 0 0 10px;</span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="13-4-情况四【常用】【函数式】"><a href="#13-4-情况四【常用】【函数式】" class="headerlink" title="13.4 情况四【常用】【函数式】:"></a>13.4 情况四【常用】【函数式】:</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231330165.png" alt="image-20240722231330165"></p><p>结论: 监视的要是对象里面的属性，最好写成函数，注意：若是监视的是地址值，需要关注对象内部。需要开启手动深度监视</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;姓名：&#123;&#123;person.name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123;person.car.car1&#125;&#125;-&#123;&#123; person.car.car2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changename&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeperson&quot;&gt;修改person&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar1&quot;&gt;修改car1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar2&quot;&gt;修改car2&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAll&quot;&gt;修改全部&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123;ref,watch,reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">    let person = reactive(&#123;</span><br><span class="line">        name:&quot;zhangsan&quot;,</span><br><span class="line">        age:22,</span><br><span class="line">        car:&#123;</span><br><span class="line">            car1:&#x27;hello1&#x27;,</span><br><span class="line">            car2:&#x27;hello2&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const changename = () =&gt;&#123;</span><br><span class="line">        person.age += 1;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeperson = () =&gt;&#123;</span><br><span class="line">        // 如果是recative 就要用object.assgin</span><br><span class="line">        Object.assign(person,&#123;name:&quot;zha33ngsan&quot;, age:2342&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    const changeCar1 = ()=&gt;&#123;</span><br><span class="line">        person.car.car1 = &#x27;world1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeCar2 = ()=&gt;&#123;</span><br><span class="line">        person.car.car2 = &#x27;world2&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    const changeAll = ()=&gt;&#123;</span><br><span class="line">        person.car = &#123;car1:&#x27;hello221&#x27;, car2:&#x27;hello241&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    watch(()=&gt;&#123;return person.age&#125;,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">        console.log(newValue,oldValue);</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">        console.log(newValue,oldValue);</span><br><span class="line">        </span><br><span class="line">    &#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .person&#123;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">        box-shadow: 0 0 10px;</span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="13-5-情况五"><a href="#13-5-情况五" class="headerlink" title="13.5 情况五:"></a>13.5 情况五:</h3><p>监视上述的多个数据【多个函数】<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231349625.png" alt="image-20240722231349625"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([()=&gt;person.name,()=&gt;person.car.car1],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(newValue,oldValue);</span><br><span class="line">&#125;,&#123;deep:true&#125;)</span><br></pre></td></tr></table></figure><p>【多写项目-练习】</p><h2 id="14-watchEffect"><a href="#14-watchEffect" class="headerlink" title="14. watchEffect"></a>14. watchEffect</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231409908.png" alt="image-20240722231409908"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231431014.png" alt="image-20240722231431014">)</p><h2 id="15-标签中ref属性"><a href="#15-标签中ref属性" class="headerlink" title="15. 标签中ref属性"></a>15. 标签中ref属性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231448962.png" alt="image-20240722231448962"></p><h2 id="16-回顾TS中的接口-泛型-自定义类型"><a href="#16-回顾TS中的接口-泛型-自定义类型" class="headerlink" title="16. 回顾TS中的接口_泛型_自定义类型"></a>16. 回顾TS中的接口_泛型_自定义类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231505362.png" alt="image-20240722231505362"></p><h2 id="17-Props的使用"><a href="#17-Props的使用" class="headerlink" title="17. Props的使用"></a>17. Props的使用</h2><p>vue2【父子之间的通信】<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231606545.png" alt="image-20240722231606545"><br>vue3通信<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231617003.png" alt="image-20240722231617003"><br>注意点：【区别一下：的绑定和 ref的区别】<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231632037.png" alt="image-20240722231632037"><br>【父子之间的传值的多种方式】<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231642392.png" alt="image-20240722231642392"><br>【注意：宏函数不用引入，例如defineProps】</p><h2 id="18-理解生命周期【组件的一生】"><a href="#18-理解生命周期【组件的一生】" class="headerlink" title="18. 理解生命周期【组件的一生】"></a>18. 理解生命周期【组件的一生】</h2><p>概念: vue 组件实例在创建时要经历一系列的初始化步骤，在此过程中 vue 会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为:生命周期钩子创建、挂载、更新、销毁【每个时期都调用特定的函数】created 、 mounted 、updated 、destoyed叫法：生命周期、生命周期函数、生命周期钩子。</p><h3 id="18-1-vue2的生命周期"><a href="#18-1-vue2的生命周期" class="headerlink" title="18.1 vue2的生命周期"></a>18.1 vue2的生命周期</h3><p>创建、（前与后）（beforeCreate|Created）<br>挂载、（前与后）（beforeMount|Mounted)<br>更新、（前与后）（beforeUpdate|updated)<br>销毁、（前与后）（beforeDestory|destoryed)</p><h3 id="18-2-vue3的生命周期"><a href="#18-2-vue3的生命周期" class="headerlink" title="18.2 vue3的生命周期"></a>18.2 vue3的生命周期</h3><p>创建、setup —————————-&gt;   （前与后）（beforeCreate|Created）<br>挂载、onBeforeMount|onMounted—&gt;（前与后）（beforeMount|Mounted)<br>更新、onBeforeUpdate|onUpdated—&gt;（前与后）（beforeUpdate|updated)<br>卸载、onBeforeUnmount|onUnmounted—-&gt;（前与后）（beforeDestory|destoryed)<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231739326.png" alt="image-20240722231739326"></p><h2 id="19-自定义hooks【mixin】【重】"><a href="#19-自定义hooks【mixin】【重】" class="headerlink" title="19. 自定义hooks【mixin】【重】"></a>19. 自定义hooks【mixin】【重】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722231811161.png" alt="image-20240722231811161"></p><h2 id="20【…-】-路由"><a href="#20【…-】-路由" class="headerlink" title="20【….】. 路由"></a>20【….】. 路由</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712234639227-7e9b828b-2cde-4fdc-9e24-06cf559c5e29.png#averageHue=%23d0cec6&clientId=u19450041-02b2-4&from=paste&height=182&id=u58eeb701&originHeight=246&originWidth=1359&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=307086&status=done&style=none&taskId=ufd8ebe0c-e1b0-45c9-9d24-8f283a42dbe&title=&width=1006.6667377801639" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712236567911-e9d972ab-94d2-4be6-8c63-5f6f26e84bfc.png#averageHue=%23272938&clientId=u19450041-02b2-4&from=paste&height=719&id=u935b095a&originHeight=970&originWidth=2068&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=393347&status=done&style=none&taskId=ub4a9d583-5706-4a69-ae21-f9d61dbcdb8&title=&width=1531.8519600657683" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712237320909-c9181ea1-f02d-43dc-a6bc-958ee3899c23.png#averageHue=%23292b3b&clientId=u6ef51017-9d89-4&from=paste&height=484&id=u9398b89b&originHeight=654&originWidth=901&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=99137&status=done&style=none&taskId=uc322a762-cd07-417f-ab7b-13891528c27&title=&width=667.4074545547666" alt="image.png"></p><h3 id="20-1-两个注意点"><a href="#20-1-两个注意点" class="headerlink" title="20.1 两个注意点"></a>20.1 两个注意点</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712240348025-d485db80-8fc5-4683-ae0d-f3da36785d21.png#averageHue=%23ced5d0&clientId=u6bc3eff6-fece-4&from=paste&height=153&id=u1905893a&originHeight=207&originWidth=1386&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=155424&status=done&style=none&taskId=u99eb426d-d671-4aaf-b7bb-843064c323f&title=&width=1026.6667391930148" alt="image.png"><br>路由组件：pages&#x2F;views<br>一般组件：components<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712240895727-affb6dc7-46e3-4fce-8070-f733e6b44677.png#averageHue=%23262837&clientId=u6bc3eff6-fece-4&from=paste&height=546&id=ub8a50caa&originHeight=819&originWidth=1409&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=215969&status=done&style=none&taskId=ud3d95f0d-b831-4c54-9099-1ef528ebb79&title=&width=939.3333333333334" alt="image.png"></p><h3 id="20-2-to的两种写法"><a href="#20-2-to的两种写法" class="headerlink" title="20.2 to的两种写法"></a>20.2 to的两种写法</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712240365858-d6f4bc66-c98d-4b98-988c-b8311b90247a.png#averageHue=%23f8f8f7&clientId=u6bc3eff6-fece-4&from=paste&height=196&id=u5133475d&originHeight=265&originWidth=1396&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=166451&status=done&style=none&taskId=u12939036-c679-4bb9-b9e6-6c07b1b661a&title=&width=1034.0741471237004" alt="image.png"></p><h3 id="20-3-路由器工作模式"><a href="#20-3-路由器工作模式" class="headerlink" title="20.3 路由器工作模式"></a>20.3 路由器工作模式</h3><p>【history 和 hash模式】<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712240992191-81da3d55-57db-4bc7-bf3a-8a1ef1180502.png#averageHue=%23eeeae1&clientId=u6bc3eff6-fece-4&from=paste&height=290&id=u4161b782&originHeight=435&originWidth=1384&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=212266&status=done&style=none&taskId=u251d3105-ca3a-45da-986f-ede8e5b0b76&title=&width=922.6666666666666" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712241200734-73c9b606-b21c-4bcd-8d88-52701dd77ad9.png#averageHue=%23e7e4db&clientId=u6bc3eff6-fece-4&from=paste&height=301&id=u27774daa&originHeight=452&originWidth=1360&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=223991&status=done&style=none&taskId=u6b7e6ff9-85be-407c-9845-bc456790f60&title=&width=906.6666666666666" alt="image.png"></p><h3 id="20-4-命名路由"><a href="#20-4-命名路由" class="headerlink" title="20.4 命名路由"></a>20.4 命名路由</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712241326893-180ddf23-d22a-4e58-95b9-0df6b88913d8.png#averageHue=%23f7f7f7&clientId=u6bc3eff6-fece-4&from=paste&height=551&id=u4c460cdd&originHeight=826&originWidth=1189&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=180462&status=done&style=none&taskId=u748c1bd2-8eb1-47f2-8aa8-a042685d229&title=&width=792.6666666666666" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712241537923-fe8cb009-7843-4dac-b196-c752dcdc2493.png#averageHue=%232a2c3c&clientId=u6bc3eff6-fece-4&from=paste&height=253&id=ueb038f4c&originHeight=380&originWidth=810&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=71827&status=done&style=none&taskId=ua25f07db-eaa6-48bf-84cb-a06181454be&title=&width=540" alt="image.png"></p><h3 id="20-5-嵌套路由"><a href="#20-5-嵌套路由" class="headerlink" title="20.5 嵌套路由"></a>20.5 嵌套路由</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712243629915-ef8251ca-02c8-4b53-8e2e-c63e4ffe5b2d.png#averageHue=%23292c3c&clientId=u6bc3eff6-fece-4&from=paste&height=690&id=u80835d27&originHeight=1035&originWidth=2093&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=418381&status=done&style=none&taskId=u7c8ef0b4-8469-4156-aaf3-7f5eeec8897&title=&width=1395.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712243734906-500dcb0b-7083-4229-a13f-3f6c4b098f04.png#averageHue=%23fafaf9&clientId=u6bc3eff6-fece-4&from=paste&height=451&id=ub9340cad&originHeight=676&originWidth=1496&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&size=118870&status=done&style=none&taskId=u22443cb5-53ca-4bdd-b605-140a3bd55ab&title=&width=997.3333333333334" alt="image.png"></p><h3 id="20-6-路由-query参数"><a href="#20-6-路由-query参数" class="headerlink" title="20.6 路由_query参数"></a>20.6 路由_query参数</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712245241170-1ed9c018-1b6d-486c-b952-7d593c81e32e.png#averageHue=%23292b3b&clientId=u33151b23-d57e-4&from=paste&height=558&id=u38a44a3f&originHeight=837&originWidth=1970&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=234334&status=done&style=none&taskId=u84319e23-f3db-485c-9359-cbaa75323a0&title=&width=1313.3333333333333" alt="image.png"></p><h3 id="20-7-路由-params参数"><a href="#20-7-路由-params参数" class="headerlink" title="20.7 路由_params参数"></a>20.7 路由_params参数</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712246011577-f64ff4fd-cfef-45dc-bdef-fa26d8615058.png#averageHue=%232a2c3d&clientId=u33151b23-d57e-4&from=paste&height=601&id=udaf2de3e&originHeight=902&originWidth=1942&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=385050&status=done&style=none&taskId=u2dfa5b5f-7b4d-465d-b3fc-509f06b61d5&title=&width=1294.6666666666667" alt="image.png"></p><ul><li>必须为name</li><li>参数如果可传可不传则添加？在占位的地方</li><li>参数不能为数组和对象</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712246182332-1d67267b-426e-4d56-90a1-9fb3b07f4830.png#averageHue=%23e9f0ed&clientId=u33151b23-d57e-4&from=paste&height=121&id=uf32eabd6&originHeight=181&originWidth=1402&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=148976&status=done&style=none&taskId=ub5f92a01-e99b-427d-9165-d26a45e9d19&title=&width=934.6666666666666" alt="image.png"></p><h2 id="21-路由的Props配置"><a href="#21-路由的Props配置" class="headerlink" title="21. 路由的Props配置"></a>21. 路由的Props配置</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712246198956-0801c403-beb7-4255-bf02-3b46f2280002.png#averageHue=%23f6f5f5&clientId=u33151b23-d57e-4&from=paste&height=488&id=ucc837670&originHeight=732&originWidth=1425&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=410378&status=done&style=none&taskId=u0641b111-538e-460f-8bb4-7a986ff4e61&title=&width=950" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712246380352-10fbd812-9eba-4272-98ab-1dfdd2d550ad.png#averageHue=%23713b19&clientId=u33151b23-d57e-4&from=paste&height=287&id=ucbc37bf8&originHeight=431&originWidth=1724&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=610180&status=done&style=none&taskId=uf7b5131e-789e-4dbf-8910-6fa657215d3&title=&width=1149.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712246571032-e591b6c1-b793-46ca-9090-269758641c1c.png#averageHue=%23292b3b&clientId=u33151b23-d57e-4&from=paste&height=463&id=ua368f61a&originHeight=695&originWidth=1716&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=164900&status=done&style=none&taskId=u4de96303-f0b8-41cb-87ed-bb4ca2228a4&title=&width=1144" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712247023696-4518fb45-89fb-4cc9-9958-8ba14143a483.png#averageHue=%2321211f&clientId=u33151b23-d57e-4&from=paste&height=427&id=u337ed0d5&originHeight=640&originWidth=1584&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=611046&status=done&style=none&taskId=u37b7ed7b-eef4-4923-aa69-e13fcdb6940&title=&width=1056" alt="image.png"></p><h4 id="【注意】"><a href="#【注意】" class="headerlink" title="【注意】"></a>【注意】</h4><ul><li>一般组件和路由组件传参的区别</li></ul><h2 id="22-路由的-replace属性"><a href="#22-路由的-replace属性" class="headerlink" title="22. 路由的_replace属性"></a>22. 路由的_replace属性</h2><ul><li>push【默认】</li><li>replace【替换】</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712247324243-3136a53b-9432-4f06-ad60-e6af0ddfa4d4.png#averageHue=%23fcfbfb&clientId=u32e45071-d049-4&from=paste&height=237&id=u1aad7f9c&originHeight=355&originWidth=1351&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=216272&status=done&style=none&taskId=u8f801723-4997-4c08-b623-fcaeb2d94b1&title=&width=900.6666666666666" alt="image.png"></p><h2 id="23-【编程式导航】"><a href="#23-【编程式导航】" class="headerlink" title="23.【编程式导航】"></a>23.【编程式导航】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712247352640-80e5149f-2e96-4174-9f92-f303d77b1697.png#averageHue=%23ecddcb&clientId=u32e45071-d049-4&from=paste&height=53&id=ud968d1fe&originHeight=80&originWidth=1118&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=66199&status=done&style=none&taskId=u3e4a439c-e990-43a1-b7b4-08b40367263&title=&width=745.3333333333334" alt="image.png"></p><blockquote><p>出了routerlink进行跳转还有编程式路由导航</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712247508701-472c5d8d-59f4-42f8-9b26-4c815b4ab683.png#averageHue=%23cec9c2&clientId=u32e45071-d049-4&from=paste&height=78&id=u01cd347a&originHeight=117&originWidth=1325&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=134288&status=done&style=none&taskId=uc4b9483d-48c5-44a1-86be-2703961b9d3&title=&width=883.3333333333334" alt="image.png"></p><ul><li>什么时候进行编程式导航<ul><li>需要再某个条件下跳转</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712248299408-36ac3f85-bd2e-4724-b2d2-4f7f2813d010.png#averageHue=%2324221e&clientId=u32e45071-d049-4&from=paste&height=419&id=uc384fcf9&originHeight=628&originWidth=1504&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=545091&status=done&style=none&taskId=uf6550595-fc6f-4b18-b27e-3d0e52c9be1&title=&width=1002.6666666666666" alt="image.png"></p><h2 id="24-路由重定向"><a href="#24-路由重定向" class="headerlink" title="24. 路由重定向"></a>24. 路由重定向</h2><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712248404361-4b2dac25-6f59-497b-bce8-507e9c8674d4.png#averageHue=%23282a3a&clientId=u32e45071-d049-4&from=paste&height=747&id=u6a441249&originHeight=1120&originWidth=900&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=131139&status=done&style=none&taskId=uc8860eff-e82d-424a-9180-39b560a0498&title=&width=600" alt="image.png"></p><h2 id="25-Pinia【对比VUE2中vuex】【集中式状态数据管理】"><a href="#25-Pinia【对比VUE2中vuex】【集中式状态数据管理】" class="headerlink" title="25. Pinia【对比VUE2中vuex】【集中式状态数据管理】"></a>25. Pinia【对比VUE2中vuex】【集中式状态数据管理】</h2><p>【redux vuex pinia】<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712248458093-6375ad19-1bac-4905-83fc-64c4b41abe70.png#averageHue=%23616a6a&clientId=u32e45071-d049-4&from=paste&height=388&id=u33511af4&originHeight=582&originWidth=1526&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=695831&status=done&style=none&taskId=uccc85ffc-686a-462b-b18e-8eb2be31dde&title=&width=1017.3333333333334" alt="image.png"><br>是vue的最新的状态管理工具，是vuex的替代品<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1710572712930-430abf17-c655-4cae-a231-5584c216e1a2.png#averageHue=%23f8f7f7&clientId=u5fcc12d9-678c-4&from=paste&height=667&id=u94a370a5&originHeight=800&originWidth=1876&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=416564&status=done&style=none&taskId=u71c17093-058b-41d0-a4f7-5483ff041e0&title=&width=1563.3332712120505" alt="image.png"></p><h2 id="26-手动添加pinia"><a href="#26-手动添加pinia" class="headerlink" title="26. 手动添加pinia"></a>26. 手动添加pinia</h2><p>官网：<a href="https://pinia.vuejs.org/zh/introduction.html">https://pinia.vuejs.org/zh/introduction.html</a></p><ol><li>使用vite创建一个新的vue3项目</li><li>安装pinia到项目中</li></ol><p>用vite安装时注意node的版本</p><h3 id="26-1-案例"><a href="#26-1-案例" class="headerlink" title="26.1 案例"></a>26.1 案例</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712248722873-cb397570-d219-43ec-86d7-8692ec566a4d.png#averageHue=%23d1a13a&clientId=u32e45071-d049-4&from=paste&height=494&id=ua1ce714e&originHeight=741&originWidth=935&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=278061&status=done&style=none&taskId=u5ddd00cd-3160-4521-b004-402c025c008&title=&width=623.3333333333334" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712283765401-4f523990-de10-4c13-a933-3516303d3e2f.png#averageHue=%23292b3b&clientId=u882f4226-462c-4&from=paste&height=219&id=u5ccbda5d&originHeight=328&originWidth=1295&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=71060&status=done&style=none&taskId=ub06d9593-9a7a-403a-8996-06101b3411a&title=&width=863.3333333333334" alt="image.png"><br>lovetalk.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;lovetalk&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;getLoveTalk&quot;&gt;hello&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;item in newsList&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; nanoid &#125; from &#x27;nanoid&#x27;;</span><br><span class="line">const newsList = reactive([</span><br><span class="line">    &#123; id: &#x27;12423421&#x27;, title: &#x27;hel123&#x27; &#125;,</span><br><span class="line">    &#123; id: &#x27;1224231&#x27;, title: &#x27;h424el123&#x27; &#125;,</span><br><span class="line">    &#123; id: &#x27;1242341&#x27;, title: &#x27;he4243l123&#x27; &#125;,</span><br><span class="line">]);</span><br><span class="line">async function getLoveTalk() &#123;</span><br><span class="line">    // 下面的写法：连续解构赋值 + 重命名</span><br><span class="line">    let &#123;</span><br><span class="line">        data: &#123; content:title &#125;,</span><br><span class="line">    &#125; = await axios.get(&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;);</span><br><span class="line">    //    nanoid 可以随机生成ID</span><br><span class="line">    let obj = &#123; id: nanoid(),title&#125;;</span><br><span class="line">    console.log(obj);</span><br><span class="line">    newsList.unshift(obj);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.lovetalk &#123;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>count.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;count&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;minus&quot;&gt;减 &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">let sum = ref(1)</span><br><span class="line">let n = ref(1)</span><br><span class="line">function add()&#123;</span><br><span class="line">    sum.value += n.value</span><br><span class="line">&#125;</span><br><span class="line">function minus()&#123;</span><br><span class="line">    sum.value -= n.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.count &#123;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>【注意】：引入了axios和nanoid【随机生成id】</p><h3 id="26-2-搭建pinia环境"><a href="#26-2-搭建pinia环境" class="headerlink" title="26.2 搭建pinia环境"></a>26.2 搭建pinia环境</h3><p>npm i pinia<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712284080394-396db6bf-833a-4a4d-af31-7870f69773d5.png#averageHue=%2396bd71&clientId=u882f4226-462c-4&from=paste&height=418&id=ue8e3d6c0&originHeight=627&originWidth=1757&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=117595&status=done&style=none&taskId=ub814f8a5-b0dc-46e8-ac93-becced08229&title=&width=1171.3333333333333" alt="image.png"></p><h3 id="26-3-存取读取数据"><a href="#26-3-存取读取数据" class="headerlink" title="26.3 存取读取数据"></a>26.3 存取读取数据</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712286179559-b2fc2908-3f23-4a7e-ae46-36e1ea5898c8.png#averageHue=%23edecea&clientId=u1e06d9a5-baa7-4&from=paste&height=83&id=u25fe0973&originHeight=124&originWidth=1385&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=139328&status=done&style=none&taskId=ue92b5617-5273-4f37-a373-d52b560d86d&title=&width=923.3333333333334" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712286139159-7bd46933-e5d5-4f85-9f9a-1771841ba526.png#averageHue=%233d4d4c&clientId=u1e06d9a5-baa7-4&from=paste&height=507&id=u9af3351b&originHeight=760&originWidth=1384&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=355986&status=done&style=none&taskId=uf9964108-1f50-48dd-b541-3bc0d861573&title=&width=922.6666666666666" alt="image.png"></p><h2 id="27-修改数据的三种方式"><a href="#27-修改数据的三种方式" class="headerlink" title="27. 修改数据的三种方式"></a>27. 修改数据的三种方式</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712287960697-10285be3-77df-4223-9354-dbd6d2f2f0b7.png#averageHue=%23f5f5f5&clientId=u493444de-7c41-4&from=paste&height=592&id=u3d06087e&originHeight=888&originWidth=1042&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=345962&status=done&style=none&taskId=u2b4789b1-74d9-4e40-870d-1d0e13ec3bc&title=&width=694.6666666666666" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712287897259-e13c8b0e-9b22-438a-9bf8-e7d1fd116613.png#averageHue=%23272726&clientId=u493444de-7c41-4&from=paste&height=387&id=u4361e5bc&originHeight=580&originWidth=1079&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=408287&status=done&style=none&taskId=u60e19636-830d-4cd7-821f-ed705b878ab&title=&width=719.3333333333334" alt="image.png"></p><h2 id="28-storeToRefs【只关注store数据】【对数据进行解构操作】"><a href="#28-storeToRefs【只关注store数据】【对数据进行解构操作】" class="headerlink" title="28. storeToRefs【只关注store数据】【对数据进行解构操作】"></a>28. storeToRefs【只关注store数据】【对数据进行解构操作】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712288233228-311e1724-dd14-4a05-b380-a84d4f4b56df.png#averageHue=%23404130&clientId=u493444de-7c41-4&from=paste&height=298&id=u91d12c10&originHeight=447&originWidth=1153&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=570953&status=done&style=none&taskId=u72fd0d3b-6264-4b7e-9a8f-ac1abfdcaa0&title=&width=768.6666666666666" alt="image.png"></p><h2 id="29-getters"><a href="#29-getters" class="headerlink" title="29. getters"></a>29. getters</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712288317932-0c97935e-22e2-4ea6-80ee-73f8ec206eae.png#averageHue=%23f0efef&clientId=u493444de-7c41-4&from=paste&height=83&id=u21e1ca63&originHeight=125&originWidth=1305&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=82224&status=done&style=none&taskId=u64a72d25-0b90-4cd5-80ab-1aab7bdff16&title=&width=870" alt="image.png"><br>对数据的加工</p><h2 id="30-subscribe"><a href="#30-subscribe" class="headerlink" title="30. $subscribe"></a>30. $subscribe</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712288535894-0783ff0c-d1d0-42d7-bd54-8eebf17ec711.png#averageHue=%23f9f9f9&clientId=u493444de-7c41-4&from=paste&height=214&id=ue29a88ef&originHeight=321&originWidth=1413&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=162066&status=done&style=none&taskId=u5c0404f7-947b-459b-b14a-5a0d4fcf65b&title=&width=942" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712288874334-ce60a03b-a386-4b0c-a683-fde9aca37700.png#averageHue=%23434133&clientId=u493444de-7c41-4&from=paste&height=342&id=ucc1dfcea&originHeight=513&originWidth=1491&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=507491&status=done&style=none&taskId=ueee50725-9710-4d15-8fba-116eff96908&title=&width=994" alt="image.png"></p><h2 id="31-store的组合式写法【推荐】"><a href="#31-store的组合式写法【推荐】" class="headerlink" title="31. store的组合式写法【推荐】"></a>31. store的组合式写法【推荐】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712289046429-af4b402a-926d-41f0-8652-b23b0ca3d1ce.png#averageHue=%23232321&clientId=u493444de-7c41-4&from=paste&height=685&id=udcd2ed38&originHeight=1028&originWidth=1201&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=920439&status=done&style=none&taskId=u48e599f1-2b3f-4bcb-94e2-ccaa665c218&title=&width=800.6666666666666" alt="image.png"></p><h2 id="32-组件通信-方式1-props-【父子】"><a href="#32-组件通信-方式1-props-【父子】" class="headerlink" title="32. 组件通信_方式1_props 【父子】"></a>32. 组件通信_方式1_props 【父子】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712295479415-8107aaf1-e040-4198-bbcf-48c2f172c9de.png#averageHue=%23f6f6f6&clientId=u493444de-7c41-4&from=paste&height=131&id=uceb916eb&originHeight=197&originWidth=1218&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=113826&status=done&style=none&taskId=udf49d408-d839-4ce0-8303-90e0c707236&title=&width=812" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712295450401-95d8fd0d-b0ab-4bb4-ba7f-06e0c78cd5b4.png#averageHue=%23433f31&clientId=u493444de-7c41-4&from=paste&height=670&id=udcc0e88f&originHeight=1005&originWidth=1983&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=1598774&status=done&style=none&taskId=ub4a854c3-1788-4d9f-80a1-4362b3efc67&title=&width=1322" alt="image.png"></p><h2 id="33-组件通信-方式2-自定义事件【子传父】"><a href="#33-组件通信-方式2-自定义事件【子传父】" class="headerlink" title="33. 组件通信_方式2_自定义事件【子传父】"></a>33. 组件通信_方式2_自定义事件【子传父】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712297806395-47d8dd02-7514-401b-989f-155367040a6a.png#averageHue=%23292b3b&clientId=ue470492e-873a-4&from=paste&height=695&id=u99e66265&originHeight=1043&originWidth=2013&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=306235&status=done&style=none&taskId=ufa95054c-2f7b-47d0-8118-1e7f4f2af80&title=&width=1342" alt="image.png"></p><h2 id="34-组件通信-方式3-mitt【任意组件通信】"><a href="#34-组件通信-方式3-mitt【任意组件通信】" class="headerlink" title="34. 组件通信_方式3_mitt【任意组件通信】"></a>34. 组件通信_方式3_mitt【任意组件通信】</h2><ul><li>pubsub</li><li>$bus</li><li>mitt</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712297928037-018380bf-c119-4354-95f9-d5c849a1221e.png#averageHue=%23c0beb6&clientId=ue470492e-873a-4&from=paste&height=126&id=u870c4e2f&originHeight=189&originWidth=1200&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=244318&status=done&style=none&taskId=u0b6e812d-1bcd-4310-ac90-b00c407887b&title=&width=800" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712300398621-29e3b8a9-07f5-4c46-9e22-5663794f879d.png#averageHue=%233f3a2e&clientId=ue470492e-873a-4&from=paste&height=571&id=u0b393299&originHeight=857&originWidth=1879&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=1289712&status=done&style=none&taskId=uadc2def9-9b27-4299-ac0f-8a852a3e470&title=&width=1252.6666666666667" alt="image.png"></p><h2 id="35-组件通信-方式4-v-model【通常用于表单】"><a href="#35-组件通信-方式4-v-model【通常用于表单】" class="headerlink" title="35. 组件通信_方式4_v-model【通常用于表单】"></a>35. 组件通信_方式4_v-model【通常用于表单】</h2><p>作用在组件和html的方式【底层】<br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712301377542-dc83cfc6-c4a7-469b-8570-7587e71aac0c.png#averageHue=%2339392d&clientId=ue470492e-873a-4&from=paste&height=349&id=ue85cd6df&originHeight=523&originWidth=1364&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=564981&status=done&style=none&taskId=u04281644-99df-4015-b346-832e87af9a0&title=&width=909.3333333333334" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712301462241-95076d21-3163-45fd-a5e8-a31e442c1b2f.png#averageHue=%23ebeaea&clientId=ue470492e-873a-4&from=paste&height=220&id=uadc16e0c&originHeight=330&originWidth=1551&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=269054&status=done&style=none&taskId=u1a829e00-9b65-4d6f-9e43-b3b2bea0b53&title=&width=1034" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712301826262-d133b987-7e57-42d1-9090-e4b38b538796.png#averageHue=%23444033&clientId=ue470492e-873a-4&from=paste&height=567&id=u15bd9292&originHeight=680&originWidth=1913&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=1088020&status=done&style=none&taskId=ub697f650-163f-4daa-a4c8-749198f8049&title=&width=1594.1666033201773" alt="image.png"></p><h2 id="36-组件通信-方式5-atters【祖孙之间通信】【打扰了中间人】"><a href="#36-组件通信-方式5-atters【祖孙之间通信】【打扰了中间人】" class="headerlink" title="36. 组件通信_方式5_$atters【祖孙之间通信】【打扰了中间人】"></a>36. 组件通信_方式5_$atters【祖孙之间通信】【打扰了中间人】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712301969729-9bf5a8a2-04a4-44e2-b82a-42694221d933.png#averageHue=%23efeee4&clientId=ue470492e-873a-4&from=paste&height=173&id=u047d6249&originHeight=208&originWidth=1432&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=209761&status=done&style=none&taskId=u77078cd5-ad3f-48aa-baba-15efc634f5d&title=&width=1193.333285914529" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712302704881-c9047642-e170-4510-a716-7d73aeb8c658.png#averageHue=%23423d2e&clientId=ue470492e-873a-4&from=paste&height=452&id=u7401babd&originHeight=543&originWidth=2157&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=834802&status=done&style=none&taskId=u8472622c-f059-4936-b07b-a152d896a09&title=&width=1797.4999285737701" alt="image.png"></p><h2 id="37-组件通信-方式6-refs-parent【父-子-子-父】"><a href="#37-组件通信-方式6-refs-parent【父-子-子-父】" class="headerlink" title="37. 组件通信_方式6_$refs-$parent【父-&gt;子|子-&gt;父】"></a>37. 组件通信_方式6_$refs-$parent【父-&gt;子|子-&gt;父】<img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712302774503-24f0c888-06e8-4f3b-b8ab-b4ae6bcbda33.png#averageHue=%23f9f9f8&clientId=ue470492e-873a-4&from=paste&height=412&id=u7392a31b&originHeight=494&originWidth=1426&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=208068&status=done&style=none&taskId=u22935326-1f3d-4ea0-9412-f54f99b5c1a&title=&width=1188.333286113211" alt="image.png"></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712303873805-fdd250ed-1211-4230-87dd-f4253014325e.png#averageHue=%23ca942f&clientId=ue470492e-873a-4&from=paste&height=870&id=uec1439db&originHeight=1044&originWidth=2105&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=1195264&status=done&style=none&taskId=u2c0da20a-0fdb-4d20-a37e-52f4ec33356&title=&width=1754.1665969623486" alt="image.png"></p><h2 id="38-组件通信-方式7-provide-inject【提供-注入】【向后代之间通信】【零打扰】"><a href="#38-组件通信-方式7-provide-inject【提供-注入】【向后代之间通信】【零打扰】" class="headerlink" title="38. 组件通信_方式7_provide_inject【提供-注入】【向后代之间通信】【零打扰】"></a>38. 组件通信_方式7_provide_inject【提供-注入】【向后代之间通信】【零打扰】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712304757204-969d118f-5972-418d-85c4-cf4adcaa2006.png#averageHue=%23464133&clientId=u646201ee-cfc4-4&from=paste&height=682&id=u222ff9fb&originHeight=818&originWidth=2025&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=1265933&status=done&style=none&taskId=ua1884d48-c361-4d10-bf13-802204d2768&title=&width=1687.4999329447774" alt="image.png"></p><h2 id="39-插槽"><a href="#39-插槽" class="headerlink" title="39. 插槽"></a>39. 插槽</h2><h3 id="39-1-默认插槽"><a href="#39-1-默认插槽" class="headerlink" title="39.1 默认插槽"></a>39.1 默认插槽</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712305368337-9c22d8da-2b34-4c6c-aa90-e6552d5dc5a5.png#averageHue=%23534d2e&clientId=u646201ee-cfc4-4&from=paste&height=542&id=u9306f52f&originHeight=651&originWidth=1474&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=884560&status=done&style=none&taskId=ua68abe43-3bfb-4249-bcab-f3de1e5bd06&title=&width=1228.333284523754" alt="image.png"></p><h3 id="39-2-具名插槽【template-中-v-solt-】【重】【动态的摆放】"><a href="#39-2-具名插槽【template-中-v-solt-】【重】【动态的摆放】" class="headerlink" title="39.2 具名插槽【template 中 v-solt &amp; #】【重】【动态的摆放】"></a>39.2 具名插槽【template 中 v-solt &amp; #】【重】【动态的摆放】</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712305622966-51cc7c9f-f1cf-4f59-aeb9-4f554e7eccc1.png#averageHue=%23403c2f&clientId=u646201ee-cfc4-4&from=paste&height=537&id=u06b1dd24&originHeight=645&originWidth=1872&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=788793&status=done&style=none&taskId=u4e4717a3-3ee5-4d01-89c1-90cf6ffbd8f&title=&width=1559.999938011172" alt="image.png"><br>可以用【#s1 、#s2代替v-slot】</p><h3 id="39-3-作用域插槽"><a href="#39-3-作用域插槽" class="headerlink" title="39.3 作用域插槽"></a>39.3 作用域插槽</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712306302355-6bb4ed27-0016-4859-9631-9d2f4533f56a.png#averageHue=%23443c31&clientId=u646201ee-cfc4-4&from=paste&height=363&id=u98c7a5d0&originHeight=436&originWidth=1117&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=393603&status=done&style=none&taskId=ueb8196af-8e8f-461d-9754-847a9cf2950&title=&width=930.8332963453413" alt="image.png"></p><h2 id="40-总结"><a href="#40-总结" class="headerlink" title="40. 总结"></a>40. 总结</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722232101767.png" alt="image-20240722232101767"></p><h2 id="41-其他API"><a href="#41-其他API" class="headerlink" title="41. 其他API"></a>41. 其他API</h2><h3 id="41-shallowRef-和-shallowReactive"><a href="#41-shallowRef-和-shallowReactive" class="headerlink" title="41. shallowRef 和 shallowReactive"></a>41. shallowRef 和 shallowReactive</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712306558129-4bc85544-f469-4db6-8555-992e36d7a9c6.png#averageHue=%23fbfbfa&clientId=u646201ee-cfc4-4&from=paste&height=619&id=ucab16dd1&originHeight=743&originWidth=1442&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=403954&status=done&style=none&taskId=uf558bf90-b6cb-419b-83c5-fe318a7d0d1&title=&width=1201.6666189167254" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712306895602-f6210f9d-9b64-47ec-9349-53c0f0896fb0.png#averageHue=%23e9ede7&clientId=u646201ee-cfc4-4&from=paste&height=158&id=ub620d73e&originHeight=190&originWidth=864&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=86763&status=done&style=none&taskId=uca0e8f2b-d20b-4e35-9760-22dcb1592f6&title=&width=719.9999713897716" alt="image.png"></p><h3 id="41-2-readonly-和-shallowReadonly"><a href="#41-2-readonly-和-shallowReadonly" class="headerlink" title="41.2 readonly 和 shallowReadonly"></a>41.2 readonly 和 shallowReadonly</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712306951914-7a3bd063-abaa-4c8a-90ad-bbe9d1fdd5c5.png#averageHue=%23fbfafa&clientId=u646201ee-cfc4-4&from=paste&height=532&id=uda25cd48&originHeight=639&originWidth=1398&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=306880&status=done&style=none&taskId=u787b07f4-f1cb-4291-b742-e4d2eedc855&title=&width=1164.999953707061" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712307143814-9901e385-f22c-41b9-b00a-6b9bdd613a25.png#averageHue=%23fbfbfa&clientId=u646201ee-cfc4-4&from=paste&height=303&id=udc03f2a1&originHeight=364&originWidth=1239&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=195794&status=done&style=none&taskId=u341b9235-4ac9-41f7-a377-450f7f5d306&title=&width=1032.4999589721378" alt="image.png"></p><h3 id="41-3-roRaw-和-markRow"><a href="#41-3-roRaw-和-markRow" class="headerlink" title="41.3 roRaw 和 markRow"></a>41.3 roRaw 和 markRow</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712307178749-6b33910d-0b4d-4abf-a2d2-16a7b6cf954b.png#averageHue=%23e4ebe6&clientId=u646201ee-cfc4-4&from=paste&height=349&id=u10ce53b1&originHeight=419&originWidth=1377&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=329731&status=done&style=none&taskId=u32576ed8-698d-49aa-b2f5-bdf6810d5e2&title=&width=1147.4999544024486" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712307283202-5ada9301-b219-4f7c-8ae3-be7a2eb628f1.png#averageHue=%23e9d3bc&clientId=u646201ee-cfc4-4&from=paste&height=214&id=u7dce0b03&originHeight=257&originWidth=1420&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=163762&status=done&style=none&taskId=ud8cfc676-a038-4217-88fc-55e389784d9&title=&width=1183.3332863118933" alt="image.png"></p><h3 id="41-4-customRef"><a href="#41-4-customRef" class="headerlink" title="41.4 customRef"></a>41.4 customRef</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712307333170-9c468680-a75c-46ca-9d29-8d04c5b2a3e5.png#averageHue=%23e4d4c2&clientId=u646201ee-cfc4-4&from=paste&height=50&id=uf34a6444&originHeight=60&originWidth=1099&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=58532&status=done&style=none&taskId=ubbd40cee-649d-4ede-b927-64b065ced08&title=&width=915.8332969413877" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712307488633-2738a5e0-af80-4794-9e0a-4ea60a29fb3d.png#averageHue=%23201f1f&clientId=u646201ee-cfc4-4&from=paste&height=487&id=uac30d811&originHeight=584&originWidth=1054&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=359612&status=done&style=none&taskId=uaea35bfa-f926-4a70-8371-2ed0d3d2ba1&title=&width=878.3332984315039" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712307668674-1a2c4c8f-73c1-4a1b-9f3b-d43599683cf2.png#averageHue=%23232322&clientId=u646201ee-cfc4-4&from=paste&height=614&id=ucba33ff0&originHeight=737&originWidth=1702&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=880171&status=done&style=none&taskId=u177cfb3c-3aeb-4641-9657-f500c62e094&title=&width=1418.3332769738327" alt="image.png"></p><h2 id="41-5-Teleport【转移】"><a href="#41-5-Teleport【转移】" class="headerlink" title="41.5 Teleport【转移】"></a>41.5 Teleport【转移】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712307720634-60852bc4-d4c7-4086-9cc9-7cb122970f01.png#averageHue=%23f5f5f5&clientId=u646201ee-cfc4-4&from=paste&height=325&id=u31bd05cb&originHeight=390&originWidth=1409&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=223745&status=done&style=none&taskId=ud3be105f-0e9f-455f-a95b-e707adf19b3&title=&width=1174.1666200094771" alt="image.png"></p><h2 id="41-6-Suspense"><a href="#41-6-Suspense" class="headerlink" title="41.6 Suspense"></a>41.6 Suspense</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712308218078-3574acf0-42ae-4071-9474-29a71cffa1f1.png#averageHue=%23f9f9f9&clientId=u646201ee-cfc4-4&from=paste&height=745&id=u98571016&originHeight=894&originWidth=1533&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=445135&status=done&style=none&taskId=u95fba321-e1e1-47a2-a640-5b03c8e725f&title=&width=1277.4999492367128" alt="image.png"></p><h2 id="41-7-全局api到应用对象"><a href="#41-7-全局api到应用对象" class="headerlink" title="41.7 全局api到应用对象"></a>41.7 全局api到应用对象</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712308737991-de92c8d7-4b73-4fce-800f-26a64b8cc01a.png#averageHue=%23f7f6f5&clientId=u646201ee-cfc4-4&from=paste&height=316&id=u31dc0799&originHeight=379&originWidth=1131&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=101366&status=done&style=none&taskId=u6e3238f4-c5d6-4d24-9280-3b7caadf014&title=&width=942.4999625484163" alt="image.png"></p><h2 id="41-8-其他【非兼容性改变】"><a href="#41-8-其他【非兼容性改变】" class="headerlink" title="41.8 其他【非兼容性改变】"></a>41.8 其他【非兼容性改变】</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712308930858-95762c30-7189-45d4-ad2b-b160b35ec913.png#averageHue=%23fbfaf8&clientId=u646201ee-cfc4-4&from=paste&height=342&id=ua9e92e9e&originHeight=410&originWidth=1248&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=317317&status=done&style=none&taskId=u97a17e76-1240-4657-a04c-798cd089d8a&title=&width=1039.9999586741146" alt="image.png"></p><h2 id="41-9-面试题：vue3相比vue2做了哪些改变"><a href="#41-9-面试题：vue3相比vue2做了哪些改变" class="headerlink" title="41.9 面试题：vue3相比vue2做了哪些改变?"></a>41.9 面试题：vue3相比vue2做了哪些改变?</h2><p><a href="https://v3-migration.vuejs.org/zh/breaking-changes/">https://v3-migration.vuejs.org/zh/breaking-changes/</a><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722232201592.png" alt="image-20240722232201592"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/guide/introduction.html&quot;&gt;https
      
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue09-项目中的应用-组件通信【基本】</title>
    <link href="http://example.com/2023/02/12/Vue09-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E3%80%90%E5%9F%BA%E6%9C%AC%E3%80%91/"/>
    <id>http://example.com/2023/02/12/Vue09-项目中的应用-组件通信【基本】/</id>
    <published>2023-02-12T14:00:41.000Z</published>
    <updated>2024-07-24T09:09:02.506Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue08-项目中的应用-组件嵌套</title>
    <link href="http://example.com/2023/02/10/Vue08-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-%E7%BB%84%E4%BB%B6%E5%B5%8C%E5%A5%97/"/>
    <id>http://example.com/2023/02/10/Vue08-项目中的应用-组件嵌套/</id>
    <published>2023-02-10T14:00:41.000Z</published>
    <updated>2024-07-24T09:11:07.052Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue07-Vue-Cli脚手架开发【基于两种不同的方式】</title>
    <link href="http://example.com/2023/02/08/Vue07-Vue-Cli%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91%E3%80%90%E5%9F%BA%E4%BA%8E%E4%B8%A4%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%91/"/>
    <id>http://example.com/2023/02/08/Vue07-Vue-Cli脚手架开发【基于两种不同的方式】/</id>
    <published>2023-02-08T14:00:41.000Z</published>
    <updated>2024-07-24T09:09:29.667Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue06-组件化开发-全局组件-局部组件</title>
    <link href="http://example.com/2023/02/05/Vue06-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91-%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6-%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/2023/02/05/Vue06-组件化开发-全局组件-局部组件/</id>
    <published>2023-02-05T14:00:41.000Z</published>
    <updated>2024-07-24T09:09:51.362Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue05-双向数据绑定v-model</title>
    <link href="http://example.com/2023/02/02/Vue05-%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9Av-model/"/>
    <id>http://example.com/2023/02/02/Vue05-双向数据绑定v-model/</id>
    <published>2023-02-02T14:00:41.000Z</published>
    <updated>2024-07-24T09:10:09.075Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="vue" scheme="http://example.com/categories/vue/"/>
    
    
  </entry>
  
</feed>
