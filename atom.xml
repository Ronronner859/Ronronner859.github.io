<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大白话说前端，多读源码多实践，勤于思考善领悟</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-21T15:15:24.503Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>er dong yi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客维护中..... 请跳转到CSDN</title>
    <link href="http://example.com/2024/07/20/My-Gallery/"/>
    <id>http://example.com/2024/07/20/My-Gallery/</id>
    <published>2024-07-20T14:00:41.000Z</published>
    <updated>2024-07-21T15:15:24.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>[CSDN]: “<a href="https://blog.csdn.net/qq_51714990?spm=1000.2115.3001.5343">https://blog.csdn.net/qq_51714990?spm=1000.2115.3001.5343</a>“</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;[CSDN]: 	“&lt;a href=&quot;https://blog.csdn.net/qq_51714990?spm=1000.2115.3001.5343&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS_函数中this的指向多情况分析</title>
    <link href="http://example.com/2024/07/20/JS01_%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E5%A4%9A%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2024/07/20/JS01_函数中this的指向多情况分析/</id>
    <published>2024-07-20T10:58:13.713Z</published>
    <updated>2024-07-22T02:47:10.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1.默认绑定"></a>1.默认绑定</h2><p>默认绑定this都是指向的window全局对象</p><p>JS中只要定义了一个方法，那么该方法就会有this指向，然而在不同的情况this的指向也会有所不同</p><p>情况一：函数直接调用</p><p>情况二：通过对象调用</p><p>情况三：箭头函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.直接调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this绑定规则一之默认绑定&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数定义在对象之后，但是独立调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">bar</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bax =  obj.<span class="property">bar</span></span><br><span class="line"><span class="title function_">bax</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.高阶函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(obj.<span class="property">bar</span>);</span><br></pre></td></tr></table></figure><p>上面两种方式的调用this都是默认绑定，指向的window全局对象</p><p>补充：若是在严格模式”use strict”下，独立调用的函数的this指向是指向undefined</p><h2 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2.隐式绑定"></a>2.隐式绑定</h2><p>隐式绑定this指向的是某个对象发起的函数调用，指向这个对象本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也就是它的调用位置中，是通过某个对象发起的函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = &#123;</span><br><span class="line">    <span class="attr">bar</span>:foo</span><br><span class="line">&#125;</span><br><span class="line">x.<span class="title function_">bar</span>()</span><br></pre></td></tr></table></figure><p>this指向的是x这个对象本身。</p><h2 id="3-new关键字"><a href="#3-new关键字" class="headerlink" title="3.new关键字"></a>3.new关键字</h2><p>使用new关键词时，会创建一个新的空对象，this指向这个空对象【简单解释】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">new</span> <span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// foo()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.创建一个空对象</span></span><br><span class="line"><span class="comment">2.将this指向这个空对象</span></span><br><span class="line"><span class="comment">3.指向函数体中的代码</span></span><br><span class="line"><span class="comment">4.没有显示返回的非空对象时，默认返回这个对象</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>控制台打印结果为：<em>foo</em> <em>{}</em></p><h2 id="4-显示绑定apply、call、bind"><a href="#4-显示绑定apply、call、bind" class="headerlink" title="4.显示绑定apply、call、bind"></a>4.显示绑定apply、call、bind</h2><h3 id="4-1-call函数"><a href="#4-1-call函数" class="headerlink" title="4.1 call函数"></a>4.1 call函数</h3><p>可以执行call函数，强制this指向某一个对象，可以明确的告诉this绑定什么，直接了当</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// obj.add = add</span></span><br><span class="line"><span class="comment">// obj.add()</span></span><br><span class="line"><span class="comment">// 执行函数，并且强制this就是obj对象  自己显示的明确告诉他绑定什么</span></span><br><span class="line"><span class="comment">//执行函数，并且函数中的this指向obj对象</span></span><br><span class="line">add.<span class="title function_">call</span>(obj)</span><br><span class="line">add.<span class="title function_">call</span>(<span class="number">412</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2-apply函数"><a href="#4-2-apply函数" class="headerlink" title="4.2 apply函数"></a>4.2 apply函数</h3><p>apply函数主要与call的区别是传入的参数格式不同，都可以明白告诉this绑定什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    调用一起函数，同时绑定一个this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name,age,height</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,height)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;kobe&#x27;</span>, <span class="number">12</span>, <span class="number">1.98</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一个参数：绑定this</span></span><br><span class="line"><span class="comment">    第二个参数：传入额外的参数，以数组的形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">foo.<span class="title function_">apply</span>(<span class="string">&#x27;hello world&#x27;</span>, [<span class="string">&#x27;kobe&#x27;</span>, <span class="number">12</span>, <span class="number">1.98</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一个参数：绑定this</span></span><br><span class="line"><span class="comment">    参数列表：后续的参数是以多参数的一个形式的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">foo.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="number">213</span>, <span class="number">2.07</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// call 和 apply 第二个参数的传入的格式不一样</span></span><br></pre></td></tr></table></figure><h3 id="4-3-bind函数"><a href="#4-3-bind函数" class="headerlink" title="4.3 bind函数"></a>4.3 bind函数</h3><p>bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为<strong>新函数</strong>的参数，供调用时进行使用</p><p>官方：Function.prototype.bind()</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function"><code>Function</code></a> 实例的 <strong>bind()</strong> 方法创建一个新函数，当调用该新函数时，它会调用原始函数并将其 <code>this</code> 关键字设置为给定的值，同时，还可以传入一系列指定的参数，这些参数会插入到调用新函数时传入的参数的前面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;john&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求:调用foo时，总是绑定到obj对象身上(不希望obj对象身上有函数)</span></span><br><span class="line"><span class="comment">// 在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时进行使用</span></span><br><span class="line"> <span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="title function_">bar</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo)</span><br></pre></td></tr></table></figure><p>经典案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">getX</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * unboundGetX 没有绑定到 module，所以 this 指向全局对象，导致返回 undefined。</span></span><br><span class="line"><span class="comment"> * boundGetX 被绑定到 module，所以 this 指向 module，返回 42。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> unboundGetX = <span class="variable language_">module</span>.<span class="property">getX</span>;</span><br><span class="line"><span class="comment">// 全局下调用unboundGetX是this会指向全局对象windows nodejs中指向global 全局中无x，输出undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unboundGetX</span>()); <span class="comment">// The function gets invoked at the global scope</span></span><br><span class="line"><span class="comment">// Expected output: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind 方法创建了一个新的函数，该函数的 this 永远指向 module。</span></span><br><span class="line"><span class="keyword">const</span> boundGetX = unboundGetX.<span class="title function_">bind</span>(<span class="variable language_">module</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">boundGetX</span>());</span><br><span class="line"><span class="comment">// Expected output: 42</span></span><br></pre></td></tr></table></figure><h3 id="4-4-call-、apply-、bind-的区别及用法"><a href="#4-4-call-、apply-、bind-的区别及用法" class="headerlink" title="4.4 call()、apply()、bind()的区别及用法"></a>4.4 call()、apply()、bind()的区别及用法</h3><p>简单用法：都是用来改变this的指向</p><p><strong>call、apply的一个区别：</strong></p><p>相同点：<strong>都是调用一个对象的一个方法，用另一个对象替换当前对象（功能相同）</strong></p><p>不同点：参数格式不同</p><h5 id="call-的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；"><a href="#call-的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；" class="headerlink" title="call()的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；"></a>call()的第一个参数是this要指向的对象，后面传入的是参数列表，参数可以是任意类型，当第一个参数为null、undefined的时候，默认指向window；</h5><h5 id="apply-：第一个参数是this要指向的对象，第二个参数是数组"><a href="#apply-：第一个参数是this要指向的对象，第二个参数是数组" class="headerlink" title="apply()：第一个参数是this要指向的对象，第二个参数是数组[]"></a>apply()：第一个参数是this要指向的对象，第二个参数是数组[]</h5><p><strong>call、bind的一个区别：</strong></p><p>相同点: 都是用来改变this的指向</p><p>不同点：call改变this的指向后会再执行函数，<strong>bind改变this的指向后不会再执行函数，返回一个绑定新this的函数</strong>【React有用到】</p><p>用法：call函数</p><ol><li><strong>用来判断数据类型！</strong>  延伸–判断数据类型的方式有哪几种？</li></ol><blockquote><p><strong>在判断数据类形式使用typeof，一般不是太准确的，我们可以使用Object.prototype.toString.call()方法来判断一个数据的数据类型</strong></p></blockquote><ol start="2"><li><h4 id="利用call-翻转字符串"><a href="#利用call-翻转字符串" class="headerlink" title="利用call()翻转字符串"></a>利用call()翻转字符串</h4></li></ol><p>用法：apply函数</p><ol><li>进行求和计算</li></ol><h3 id="4-5-扩展：函数绑定的新姿势-——ES7-bind-运算符（-）"><a href="#4-5-扩展：函数绑定的新姿势-——ES7-bind-运算符（-）" class="headerlink" title="4.5 扩展：函数绑定的新姿势 ——ES7 bind 运算符（::）"></a>4.5 扩展：函数绑定的新姿势 ——ES7 bind 运算符（::）</h3><blockquote><p>ES7 bind 运算符是一种新的绑定语法，它使用两个冒号 (::) 表示，通常被称为 “双冒号运算符” 或者 “作用域解析运算符”。它的作用是将一个函数绑定到一个特定的上下文中。bind 运算符始终将左边的表达式作为函数的上下文（即 this），右边的表达式作为函数名，同时还会将左边表达式中的属性和方法转移到右边表达式中。</p></blockquote><h2 id="6-this绑定规则优先级"><a href="#6-this绑定规则优先级" class="headerlink" title="6.this绑定规则优先级"></a>6.this绑定规则优先级</h2><h2 id="7-this绑定之外的规则"><a href="#7-this绑定之外的规则" class="headerlink" title="7.this绑定之外的规则"></a>7.this绑定之外的规则</h2><h2 id="8-箭头函数的写法arrow-function"><a href="#8-箭头函数的写法arrow-function" class="headerlink" title="8.箭头函数的写法arrow function"></a>8.箭头函数的写法arrow function</h2><h2 id="9-箭头函数的简写arrow"><a href="#9-箭头函数的简写arrow" class="headerlink" title="9.箭头函数的简写arrow"></a>9.箭头函数的简写arrow</h2><h2 id="10-箭头函数实现所有偶数平方的和"><a href="#10-箭头函数实现所有偶数平方的和" class="headerlink" title="10.箭头函数实现所有偶数平方的和"></a>10.箭头函数实现所有偶数平方的和</h2><h2 id="11-箭头函数中的this使用"><a href="#11-箭头函数中的this使用" class="headerlink" title="11.箭头函数中的this使用"></a>11.箭头函数中的this使用</h2><h2 id="12-箭头函数中this的应用【模拟网络请求】"><a href="#12-箭头函数中this的应用【模拟网络请求】" class="headerlink" title="12.箭头函数中this的应用【模拟网络请求】"></a>12.箭头函数中this的应用【模拟网络请求】</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-默认绑定&quot;&gt;&lt;a href=&quot;#1-默认绑定&quot; class=&quot;headerlink&quot; title=&quot;1.默认绑定&quot;&gt;&lt;/a&gt;1.默认绑定&lt;/h2&gt;&lt;p&gt;默认绑定this都是指向的window全局对象&lt;/p&gt;
&lt;p&gt;JS中只要定义了一个方法，那么该方法就会有th
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器【WebKit内核】渲染原理【QUESTION】</title>
    <link href="http://example.com/2024/04/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8EJS%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2024/04/20/浏览器与JS的原理/</id>
    <published>2024-04-20T14:00:41.000Z</published>
    <updated>2024-07-22T02:46:39.761Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722103801093.png" alt="image-20240722103801093"></p><h2 id="1-浏览器输入一个网址（域名之后）-浏览器会呈现一个新的页面，中间的过程是怎么实现的？"><a href="#1-浏览器输入一个网址（域名之后）-浏览器会呈现一个新的页面，中间的过程是怎么实现的？" class="headerlink" title="1.浏览器输入一个网址（域名之后）,浏览器会呈现一个新的页面，中间的过程是怎么实现的？"></a>1.浏览器输入一个网址（域名之后）,浏览器会呈现一个新的页面，中间的过程是怎么实现的？</h2><pre><code>输入一个网址之后，首先DNS服务器会解析这个域名，将这个域名解析成IP地址，通过IP地址会访问到对应的服务器从该服务器中去请求资源，服务器首先会给浏览器返回index.html的静态资源，那么浏览器就可以通过一行行的从上到下的进行解析index.html文件【浏览器的内核：例如WebKit】，从而将HTML解析成一棵DOM树，如果中间有解析到link链接，就会去下载解析链接的内容，如css文件，但是这期间浏览器会继续向下进行解析，不会停留或者阻塞dom树的进行；下载完css文件后，会对css进行解析，生成cssom,称为css对象模型；通俗将也是一棵规则树。那么通过dom和cssom两棵树结合起来会生成一棵新的render tree。最后浏览器对这颗新的render tree的每个节点进行布局【排版引擎】和绘制到屏幕成，最终形成一个新个页面。</code></pre><h2 id="2-浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的"><a href="#2-浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的" class="headerlink" title="2.浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的?"></a>2.浏览器是如何解析服务器返回的静态资源的？然后呈现出页面的?</h2><pre><code>https://web.dev/articles/howbrowserswork?hl=zh-cnhtml----&gt;dom      css-----&gt;cssom结合构建--------&gt;render tree布局  ----- 绘制  ----- 呈现</code></pre><h2 id="3-什么是回流和重绘？"><a href="#3-什么是回流和重绘？" class="headerlink" title="3.什么是回流和重绘？"></a>3.什么是回流和重绘？</h2><pre><code>第一次确定页面节点的大小和位置称为布局，当第二次重新计算页面节点的大小和位置成为回流第一次渲染内容称为绘制，第二次重新渲染称为重绘</code></pre><h2 id="4-什么情况下会引起回流？什么情况下会引起重绘？"><a href="#4-什么情况下会引起回流？什么情况下会引起重绘？" class="headerlink" title="4.什么情况下会引起回流？什么情况下会引起重绘？"></a>4.什么情况下会引起回流？什么情况下会引起重绘？</h2><pre><code>1.DOM结构发生了改变        颜色、背景、样式等发生了改变2.页面布局发生了改变3.窗口resize发生了改变</code></pre><h2 id="5-怎么避免回流？"><a href="#5-怎么避免回流？" class="headerlink" title="5.怎么避免回流？"></a>5.怎么避免回流？</h2><pre><code>样式尽量一次性修改尽量频繁的操作DOM</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240722103801093.png&quot; alt=&quot;image-202407221038010
      
    
    </summary>
    
      <category term="浏览器" scheme="http://example.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>一文知TypeScript的核心</title>
    <link href="http://example.com/2024/03/20/%E9%A2%A0%E8%A6%86%E8%AE%A4%E7%9F%A5%E7%9A%84%E3%80%8ETypeScript%E3%80%8F%E3%80%90TS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91/"/>
    <id>http://example.com/2024/03/20/颠覆认知的『TypeScript』【TS深度学习】/</id>
    <published>2024-03-20T14:00:41.000Z</published>
    <updated>2024-07-21T04:36:07.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeSript【官网】"><a href="#TypeSript【官网】" class="headerlink" title="TypeSript【官网】"></a>TypeSript【<a href="https://www.typescriptlang.org/">官网</a>】</h1><p>【READBOOK】<a href="https://www.bookstack.cn/read/wangdoc-typescript-tutorial/docs-d.ts.md">https://www.bookstack.cn/read/wangdoc-typescript-tutorial/docs-d.ts.md</a></p><blockquote><p>ts是js的一个超集，解决js类型支持<br>js: 动态类型<br>ts:静态类型 代码执行的顺序是先编译在执行 发现错误更早</p></blockquote><h2 id="1-为什么要添加类型支持？"><a href="#1-为什么要添加类型支持？" class="headerlink" title="1.为什么要添加类型支持？"></a>1.为什么要添加类型支持？</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120523287.png" alt="image-20240721120523287"></p><h2 id="2-优势有什么？"><a href="#2-优势有什么？" class="headerlink" title="2.优势有什么？"></a>2.优势有什么？</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120537617.png" alt="image-20240721120537617"></p><h2 id="3-全局安装"><a href="#3-全局安装" class="headerlink" title="3.全局安装"></a>3.全局安装</h2><p>npm i -g typescript<br>tsc -v<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120743399.png" alt="image-20240721120743399"></p><h2 id="4-简化运行ts的步骤"><a href="#4-简化运行ts的步骤" class="headerlink" title="4.简化运行ts的步骤"></a>4.简化运行ts的步骤</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120750227.png" alt="image-20240721120750227"></p><h2 id="5-typescript常用类型"><a href="#5-typescript常用类型" class="headerlink" title="5.typescript常用类型"></a>5.typescript常用类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120830252.png" alt="image-20240721120830252"><br>    类型检查机制<br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120838004.png" alt="image-20240721120838004"></p><h3 id="5-1-类型注解"><a href="#5-1-类型注解" class="headerlink" title="5.1 类型注解"></a>5.1 类型注解</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120849885.png" alt="image-20240721120849885"></p><h3 id="5-2-常用基础类型"><a href="#5-2-常用基础类型" class="headerlink" title="5.2 常用基础类型"></a>5.2 常用基础类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120912074.png" alt="image-20240721120912074"></p><h3 id="5-3-原始类型"><a href="#5-3-原始类型" class="headerlink" title="5.3 原始类型"></a>5.3 原始类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120918575.png" alt="image-20240721120918575"></p><h2 id="6-数组类型"><a href="#6-数组类型" class="headerlink" title="6.数组类型"></a>6.数组类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120928792.png" alt="image-20240721120928792"></p><h2 id="7-类型别名-type关键字"><a href="#7-类型别名-type关键字" class="headerlink" title="7.类型别名 type关键字"></a>7.类型别名 type关键字</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721120940043.png" alt="image-20240721120940043"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型别名</span></span><br><span class="line">type <span class="title class_">CustomArray</span> = (number|string)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:<span class="title class_">CustomArray</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="title class_">CustomArray</span> = [<span class="number">1</span>,<span class="number">4</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><h2 id="8-函数类型"><a href="#8-函数类型" class="headerlink" title="8.函数类型"></a>8.函数类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121001207.png" alt="image-20240721121001207"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121015535.png" alt="image-20240721121015535"> <img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1710646192514-1f47469a-ab81-4011-9cf4-fe4ded6496ba.png#averageHue=%23bebebd&clientId=ubd60721e-5bad-4&from=paste&height=358&id=ub48e99c6&originHeight=430&originWidth=1188&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=185502&status=done&style=none&taskId=u9615898a-d1c0-4e3d-a657-bbb113790d6&title=&width=989.999960660936" alt="image.png"></p><h2 id="9-可选参数"><a href="#9-可选参数" class="headerlink" title="9.可选参数"></a>9.可选参数</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/mymyimage-20240721121025698.png"></p><h2 id="10-对象类型"><a href="#10-对象类型" class="headerlink" title="10.对象类型"></a>10.对象类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121049309.png" alt="image-20240721121049309"><br>对象的类型其实就是在描述对象的结构</p><h2 id="11-对象中的可选属性"><a href="#11-对象中的可选属性" class="headerlink" title="11.对象中的可选属性"></a>11.对象中的可选属性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121102273.png" alt="image-20240721121102273"></p><h2 id="12-接口【复用】"><a href="#12-接口【复用】" class="headerlink" title="12.接口【复用】"></a>12.接口【复用】</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121115763.png" alt="image-20240721121115763"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayhi</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person_3</span>:<span class="title class_">IPerson</span> =&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;JACL&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">11</span>,</span><br><span class="line">  <span class="title function_">sayhi</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person_4</span>:<span class="title class_">IPerson</span> =&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;JAC33L&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">33</span>,</span><br><span class="line">  <span class="title function_">sayhi</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person_3);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person_4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13-接口和类型别名"><a href="#13-接口和类型别名" class="headerlink" title="13.接口和类型别名"></a>13.接口和类型别名</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121126704.png" alt="image-20240721121126704"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> num = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:num = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:num = <span class="string">&#x27;asf&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><h2 id="14-接口继承复用"><a href="#14-接口继承复用" class="headerlink" title="14.接口继承复用"></a>14.接口继承复用</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121135431.png" alt="image-20240721121135431"></p><h2 id="15-元组"><a href="#15-元组" class="headerlink" title="15.元组"></a>15.元组</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121142483.png" alt="image-20240721121142483"></p><h2 id="16-类型推论"><a href="#16-类型推论" class="headerlink" title="16.类型推论"></a>16.类型推论</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121150350.png" alt="image-20240721121150350"></p><h2 id="17-类型断言"><a href="#17-类型断言" class="headerlink" title="17.类型断言"></a>17.类型断言</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121208236.png" alt="image-20240721121208236"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121217184.png" alt="image-20240721121217184"></p><h2 id="18-字面量类型"><a href="#18-字面量类型" class="headerlink" title="18.字面量类型"></a>18.字面量类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121236561.png" alt="image-20240721121236561"></p><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121252766.png" alt="image-20240721121252766"></p><h2 id="19-枚举类型"><a href="#19-枚举类型" class="headerlink" title="19.枚举类型"></a>19.枚举类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121309266.png" alt="image-20240721121309266"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121340668.png" alt="image-20240721121340668"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121347906.png" alt="image-20240721121347906"></p><h2 id="20-字符串枚举"><a href="#20-字符串枚举" class="headerlink" title="20.字符串枚举"></a>20.字符串枚举</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121359120.png" alt="image-20240721121359120"></p><h2 id="21-枚举特点"><a href="#21-枚举特点" class="headerlink" title="21.枚举特点"></a>21.枚举特点</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121408775.png" alt="image-20240721121408775"></p><h2 id="22-any类型"><a href="#22-any类型" class="headerlink" title="22.any类型"></a>22.any类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121416386.png" alt="image-20240721121416386"></p><h2 id="23-ypeof"><a href="#23-ypeof" class="headerlink" title="23.ypeof"></a>23.ypeof</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121424894.png" alt="image-20240721121424894"></p><h2 id="24-TS高级类型"><a href="#24-TS高级类型" class="headerlink" title="24.TS高级类型"></a>24.TS高级类型</h2><h3 id="24-1-class"><a href="#24-1-class" class="headerlink" title="24.1 class"></a>24.1 class</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121441081.png" alt="image-20240721121441081"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121452792.png" alt="image-20240721121452792"></p><h2 id="25-类的实例方法"><a href="#25-类的实例方法" class="headerlink" title="25.类的实例方法"></a>25.类的实例方法</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121504102.png" alt="image-20240721121504102"></p><h2 id="26-类的继承"><a href="#26-类的继承" class="headerlink" title="26.类的继承"></a>26.类的继承</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121517304.png" alt="image-20240721121517304"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121524791.png" alt="image-20240721121524791"></h2><h2 id="27-类成员可见性"><a href="#27-类成员可见性" class="headerlink" title="27.类成员可见性"></a>27.类成员可见性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121544322.png" alt="image-20240721121544322"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121559852.png" alt="image-20240721121559852"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1711526275995-c21e3839-5eb9-4938-8fc2-d6bb1ba08116.png#averageHue=%23b9b8b8&clientId=u08387cdf-9454-4&from=paste&height=298&id=u527a69cb&originHeight=358&originWidth=920&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=117780&status=done&style=none&taskId=ud2ae5221-3d06-4004-963a-137f5b18559&title=&width=766.6666362020717" alt="image.png"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121608530.png" alt="image-20240721121608530">  </p><h2 id="28-类型兼容性"><a href="#28-类型兼容性" class="headerlink" title="28.类型兼容性"></a>28.类型兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121619356.png" alt="image-20240721121619356"></p><h2 id="29-对象兼容性"><a href="#29-对象兼容性" class="headerlink" title="29.对象兼容性"></a>29.对象兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121633606.png" alt="image-20240721121633606"></p><h2 id="30-接口兼容性"><a href="#30-接口兼容性" class="headerlink" title="30.接口兼容性"></a>30.接口兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121642523.png" alt="image-20240721121642523"></p><h2 id="31-函数兼容性"><a href="#31-函数兼容性" class="headerlink" title="31.函数兼容性"></a>31.函数兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121711255.png" alt="image-20240721121711255"></p><h2 id="32-类型兼容性"><a href="#32-类型兼容性" class="headerlink" title="32.类型兼容性"></a>32.类型兼容性</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121753257.png" alt="image-20240721121753257"></p><h2 id="33-交叉类型"><a href="#33-交叉类型" class="headerlink" title="33.交叉类型"></a>33.交叉类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121806081.png" alt="image-20240721121806081"></p><h2 id="34-交叉类型-和接口继承-extends-的区别"><a href="#34-交叉类型-和接口继承-extends-的区别" class="headerlink" title="34.交叉类型(&amp;)和接口继承(extends)的区别"></a>34.交叉类型(&amp;)和接口继承(extends)的区别</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121817034.png" alt="image-20240721121817034"></p><h2 id="35-泛型"><a href="#35-泛型" class="headerlink" title="35.泛型"></a>35.泛型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121849720.png" alt="image-20240721121849720"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121902412.png" alt="image-20240721121902412"></p><h2 id="36-简化调用泛型函数"><a href="#36-简化调用泛型函数" class="headerlink" title="36.简化调用泛型函数"></a>36.简化调用泛型函数</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121923218.png" alt="image-20240721121923218"></p><h2 id="37-泛型循环"><a href="#37-泛型循环" class="headerlink" title="37.泛型循环"></a>37.泛型循环</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121937488.png" alt="image-20240721121937488"></p><h2 id="38-添加约束"><a href="#38-添加约束" class="headerlink" title="38.添加约束"></a>38.添加约束</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121947098.png" alt="image-20240721121947098"></p><h2 id="39-泛型的类型变量"><a href="#39-泛型的类型变量" class="headerlink" title="39.泛型的类型变量"></a>39.泛型的类型变量</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721121958758.png" alt="image-20240721121958758"></p><h2 id="40-泛型接口"><a href="#40-泛型接口" class="headerlink" title="40.泛型接口"></a>40.泛型接口</h2><h2 id="41-JS中的数组就是TS中的一个泛型接口"><a href="#41-JS中的数组就是TS中的一个泛型接口" class="headerlink" title="41.JS中的数组就是TS中的一个泛型接口"></a><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122008368.png" alt="image-20240721122008368">41.JS中的数组就是TS中的一个泛型接口</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122019636.png" alt="image-20240721122019636"></p><h2 id="42-class配合泛型来使用"><a href="#42-class配合泛型来使用" class="headerlink" title="42.class配合泛型来使用"></a>42.class配合泛型来使用</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122028955.png" alt="image-20240721122028955"></p><h2 id="43-泛型工具类型"><a href="#43-泛型工具类型" class="headerlink" title="43.泛型工具类型"></a>43.泛型工具类型</h2><h3 id="43-1-partial"><a href="#43-1-partial" class="headerlink" title="43.1 partial"></a>43.1 partial</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122043712.png" alt="image-20240721122043712"></p><h3 id="43-2-readonly"><a href="#43-2-readonly" class="headerlink" title="43.2 readonly"></a>43.2 readonly</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122101158.png" alt="image-20240721122101158"></p><h3 id="43-3-pick"><a href="#43-3-pick" class="headerlink" title="43.3 pick"></a>43.3 pick</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122115258.png" alt="image-20240721122115258"></p><h3 id="43-4-record"><a href="#43-4-record" class="headerlink" title="43.4 record"></a>43.4 record</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122125778.png" alt="image-20240721122125778"></p><h2 id="44-索引签名类型"><a href="#44-索引签名类型" class="headerlink" title="44.索引签名类型"></a>44.索引签名类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122135895.png" alt="image-20240721122135895"><br><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122142423.png" alt="image-20240721122142423"></p><h2 id="45-映射类型"><a href="#45-映射类型" class="headerlink" title="45.映射类型"></a>45.映射类型</h2><h3 id="45-1-基于旧类型进行创建"><a href="#45-1-基于旧类型进行创建" class="headerlink" title="45.1 基于旧类型进行创建"></a>45.1 基于旧类型进行创建</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122156811.png" alt="image-20240721122156811"></p><h3 id="45-2-基于对象创建"><a href="#45-2-基于对象创建" class="headerlink" title="45.2 基于对象创建"></a>45.2 基于对象创建</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122216988.png" alt="image-20240721122216988"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/33763848/1712045169042-d3af9b7c-16fe-473c-b138-4b320ffa2b74.png#averageHue=%23dbdada&clientId=u244b1fb9-36bf-4&from=paste&height=351&id=u92b548f8&originHeight=421&originWidth=901&originalType=binary&ratio=1.2000000476837158&rotation=0&showTitle=false&size=206437&status=done&style=none&taskId=ue187a12a-1e47-433f-b8a5-3f051279a88&title=&width=750.8333034978984" alt="image.png"></p><h3 id="45-3-引查询类型"><a href="#45-3-引查询类型" class="headerlink" title="45.3 引查询类型"></a>45.3 引查询类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122236902.png" alt="image-20240721122236902"></p><h3 id="45-4-同时查询多个索引的类型"><a href="#45-4-同时查询多个索引的类型" class="headerlink" title="45.4 同时查询多个索引的类型"></a>45.4 同时查询多个索引的类型</h3><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122253777.png" alt="image-20240721122253777"></p><h2 id="46-d-ts-类型声明文件"><a href="#46-d-ts-类型声明文件" class="headerlink" title="46.d.ts 类型声明文件"></a>46.d.ts 类型声明文件</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122304827.png" alt="image-20240721122304827"></p><h2 id="47-TS中的两种文件类型"><a href="#47-TS中的两种文件类型" class="headerlink" title="47.TS中的两种文件类型"></a>47.TS中的两种文件类型</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122315380.png" alt="image-20240721122315380"></p><h2 id="48-类型声明文件的使用说明"><a href="#48-类型声明文件的使用说明" class="headerlink" title="48.类型声明文件的使用说明"></a>48.类型声明文件的使用说明</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122324510.png" alt="image-20240721122324510"></p><h2 id="49-使用已有的类型声明文件"><a href="#49-使用已有的类型声明文件" class="headerlink" title="49.使用已有的类型声明文件"></a>49.使用已有的类型声明文件</h2><h4 id="49-1-内置api"><a href="#49-1-内置api" class="headerlink" title="49.1 内置api"></a>49.1 内置api</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122343148.png" alt="image-20240721122343148"></p><h4 id="49-2-第三方库的类型声明"><a href="#49-2-第三方库的类型声明" class="headerlink" title="49.2 第三方库的类型声明"></a>49.2 第三方库的类型声明</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122354991.png" alt="image-20240721122354991"></p><h4 id="49-3-definitelyTyped"><a href="#49-3-definitelyTyped" class="headerlink" title="49.3 definitelyTyped"></a>49.3 definitelyTyped</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/my1712108679139-c05ceccc-e2b1-4ac0-8860-eea3fa5c094e.png" alt="image.png"></p><h4 id="49-4-创建自己的声明文件"><a href="#49-4-创建自己的声明文件" class="headerlink" title="49.4 创建自己的声明文件"></a>49.4 创建自己的声明文件</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122444503.png" alt="image-20240721122444503"></p><h4 id="49-5-项目内共享类型"><a href="#49-5-项目内共享类型" class="headerlink" title="49.5 项目内共享类型"></a>49.5 项目内共享类型</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122504904.png" alt="image-20240721122504904"></p><h4 id="49-6-为已有js文件提供类型声明"><a href="#49-6-为已有js文件提供类型声明" class="headerlink" title="49.6 为已有js文件提供类型声明"></a>49.6 为已有js文件提供类型声明</h4><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122514015.png" alt="image-20240721122514015"></p><h2 id="50-【webpack】搭建一个基本的webpack4-x项目"><a href="#50-【webpack】搭建一个基本的webpack4-x项目" class="headerlink" title="50.【webpack】搭建一个基本的webpack4.x项目"></a>50.【webpack】搭建一个基本的webpack4.x项目</h2><h2 id="51-React支持TS"><a href="#51-React支持TS" class="headerlink" title="51.React支持TS"></a>51.React支持TS</h2><p><img src="https://cysir-1314462720.cos.ap-nanjing.myqcloud.com/cysir-1314462720/myimage-20240721122539813.png" alt="image-20240721122539813"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TypeSript【官网】&quot;&gt;&lt;a href=&quot;#TypeSript【官网】&quot; class=&quot;headerlink&quot; title=&quot;TypeSript【官网】&quot;&gt;&lt;/a&gt;TypeSript【&lt;a href=&quot;https://www.typescriptlang.o
      
    
    </summary>
    
      <category term="TypeScript" scheme="http://example.com/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>面试题【Record】第一回</title>
    <link href="http://example.com/2024/02/20/%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%90Record%E3%80%91%E7%AC%AC%E4%B8%80%E5%9B%9E/"/>
    <id>http://example.com/2024/02/20/面试题【Record】第一回/</id>
    <published>2024-02-20T14:00:41.000Z</published>
    <updated>2024-07-22T02:40:51.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何判断一个对象为空？"><a href="#如何判断一个对象为空？" class="headerlink" title="如何判断一个对象为空？"></a>如何判断一个对象为空？</h2><h2 id="为什么data是一个函数"><a href="#为什么data是一个函数" class="headerlink" title="为什么data是一个函数?"></a>为什么data是一个函数?</h2><h2 id="v-if与v-show的区别？用法与本质上的区别"><a href="#v-if与v-show的区别？用法与本质上的区别" class="headerlink" title="v-if与v-show的区别？用法与本质上的区别"></a>v-if与v-show的区别？用法与本质上的区别</h2><h2 id="v-for中的key是什么作用-diff算法的实现原理"><a href="#v-for中的key是什么作用-diff算法的实现原理" class="headerlink" title="v-for中的key是什么作用? diff算法的实现原理"></a>v-for中的key是什么作用? diff算法的实现原理</h2><h2 id="虚拟DOM的作用？真实DOM-通过移动原生控件在移动端显示出来-桌面端的一些控件-VR设备-–做跨平台"><a href="#虚拟DOM的作用？真实DOM-通过移动原生控件在移动端显示出来-桌面端的一些控件-VR设备-–做跨平台" class="headerlink" title="虚拟DOM的作用？真实DOM &amp; 通过移动原生控件在移动端显示出来 &amp; 桌面端的一些控件 &amp; VR设备 –做跨平台"></a>虚拟DOM的作用？真实DOM &amp; 通过移动原生控件在移动端显示出来 &amp; 桌面端的一些控件 &amp; VR设备 –做跨平台</h2><h2 id="computed-和-methods的区别？"><a href="#computed-和-methods的区别？" class="headerlink" title="computed 和 methods的区别？"></a>computed 和 methods的区别？</h2><h2 id="展开运算符的用法？"><a href="#展开运算符的用法？" class="headerlink" title="展开运算符的用法？"></a>展开运算符的用法？</h2><h2 id="获取Vue创建的代理的原始对象？toRaw"><a href="#获取Vue创建的代理的原始对象？toRaw" class="headerlink" title="获取Vue创建的代理的原始对象？toRaw"></a>获取Vue创建的代理的原始对象？toRaw</h2><h2 id="watch的基本用法，以及侦听选项？"><a href="#watch的基本用法，以及侦听选项？" class="headerlink" title="watch的基本用法，以及侦听选项？"></a>watch的基本用法，以及侦听选项？</h2><pre><code>deepimmediate</code></pre><h2 id="vue事件绑定如何传递参数-如何传递event参数"><a href="#vue事件绑定如何传递参数-如何传递event参数" class="headerlink" title="vue事件绑定如何传递参数?如何传递event参数?"></a>vue事件绑定如何传递参数?如何传递event参数?</h2><h2 id="v-for中的key有什么作用-什么是虚拟DOM"><a href="#v-for中的key有什么作用-什么是虚拟DOM" class="headerlink" title="v-for中的key有什么作用?什么是虚拟DOM?"></a>v-for中的key有什么作用?什么是虚拟DOM?</h2><h2 id="什么是计算属性-和method有什么区别"><a href="#什么是计算属性-和method有什么区别" class="headerlink" title="什么是计算属性?和method有什么区别?"></a>什么是计算属性?和method有什么区别?</h2><h2 id="如何在Vue中侦听一个数据的改变"><a href="#如何在Vue中侦听一个数据的改变" class="headerlink" title="如何在Vue中侦听一个数据的改变?"></a>如何在Vue中侦听一个数据的改变?</h2><h2 id="v-model的原理-什么是双向绑定-v-model的本质是什么"><a href="#v-model的原理-什么是双向绑定-v-model的本质是什么" class="headerlink" title="v-model的原理? 什么是双向绑定?v-model的本质是什么?"></a>v-model的原理? 什么是双向绑定?v-model的本质是什么?</h2><h2 id="如何手动实现v-model"><a href="#如何手动实现v-model" class="headerlink" title="如何手动实现v-model?"></a>如何手动实现v-model?</h2><h2 id="v-moder加上lazy、number、trim修饰符有什么作用？"><a href="#v-moder加上lazy、number、trim修饰符有什么作用？" class="headerlink" title="v-moder加上lazy、number、trim修饰符有什么作用？"></a>v-moder加上lazy、number、trim修饰符有什么作用？</h2><h2 id="什么是组件化开发-有什么作用"><a href="#什么是组件化开发-有什么作用" class="headerlink" title="什么是组件化开发?有什么作用?"></a>什么是组件化开发?有什么作用?</h2><h2 id="什么是Vue-CLl，如何使用它创建Vue项目-脚手架创建项目的流程？"><a href="#什么是Vue-CLl，如何使用它创建Vue项目-脚手架创建项目的流程？" class="headerlink" title="什么是Vue CLl，如何使用它创建Vue项目? 脚手架创建项目的流程？"></a>什么是Vue CLl，如何使用它创建Vue项目? 脚手架创建项目的流程？</h2><h2 id="Vue中注册全局组件和局部组件有什么区别"><a href="#Vue中注册全局组件和局部组件有什么区别" class="headerlink" title="Vue中注册全局组件和局部组件有什么区别?"></a>Vue中注册全局组件和局部组件有什么区别?</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何判断一个对象为空？&quot;&gt;&lt;a href=&quot;#如何判断一个对象为空？&quot; class=&quot;headerlink&quot; title=&quot;如何判断一个对象为空？&quot;&gt;&lt;/a&gt;如何判断一个对象为空？&lt;/h2&gt;&lt;h2 id=&quot;为什么data是一个函数&quot;&gt;&lt;a href=&quot;#为什么da
      
    
    </summary>
    
      <category term="Record" scheme="http://example.com/categories/Record/"/>
    
    
  </entry>
  
</feed>
